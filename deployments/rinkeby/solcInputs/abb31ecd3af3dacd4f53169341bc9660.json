{
  "language": "Solidity",
  "sources": {
    "contracts/game.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./interfaces/IGame.sol\";\r\nimport \"./interfaces/IMinter.sol\";\r\n\r\nimport \"./libraries/gameLib.sol\";\r\n\r\nimport \"./structs/stats.sol\";\r\nimport \"./structs/gameVars.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\n\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\";\r\n\r\ncontract GameV3 is IERC721Receiver, Context, VRFConsumerBase{\r\n\r\n    event NewAdmin(address admin);\r\n    event UpdatedStats(uint16 raptor, Stats stats);\r\n\r\n    event RaceChosen(string raceType);\r\n    event QPRandomRequested();\r\n    event CompRandomRequested();\r\n    event DRRandomRequested();\r\n\r\n    event InjuredRaptor(uint16 raptor);\r\n    event FightWinner(uint16 raptor);\r\n    event Fighters(uint16[2] fighters);\r\n    event Top3(uint16[3] places);\r\n\r\n    event QuickPlayRaceStarted(uint16[8] raptors);\r\n    event QuickPlayRaceWinner(uint16 raptor);\r\n\r\n    event CompetitiveRaceStarted(uint16[8] raptors);\r\n    event CompetitiveRaceWinner(uint16 raptor);\r\n\r\n    event DeathRaceStarted(uint16[8] raptors);\r\n    event DeathRaceWinner(uint16 raptor);\r\n    event RipRaptor(uint16 raptor);\r\n\r\n    address private admin;\r\n\r\n    uint16[8] public currentRaptors;\r\n\r\n    uint256 public pot;\r\n\r\n    uint256 public QPFee;\r\n    uint256 public CompFee;\r\n    uint256 public DRFee;\r\n\r\n    uint256 private constant USER_SEED_PLACEHOLDER = 0;\r\n\r\n    uint64[] private primes = [\r\n        6619,\r\n        6719,\r\n        7309,\r\n        7393,\r\n        7853,\r\n        7919,\r\n        7727,\r\n        3167\r\n    ];\r\n    \r\n    struct VRF {\r\n        address vrfCoordinator;\r\n        address linkToken;\r\n        bytes32 keyHash;\r\n        uint256 fee;\r\n        LinkTokenInterface LINK;\r\n        uint256 randomResult;\r\n        mapping(bytes32 => uint256) /* keyHash */ /* nonce */ nonces;\r\n        bytes32 lastRequestId;\r\n    }\r\n\r\n    VRF private vrf;\r\n\r\n    enum CurrentRace {\r\n        StandBy,\r\n        QuickPlay,\r\n        Competitive,\r\n        DeathRace\r\n    }\r\n\r\n    string[] raceNames =[\r\n        \"StandBy\",\r\n        \"QuickPlay\",\r\n        \"Competitive\",\r\n        \"DeathRace\"\r\n    ];\r\n\r\n    CurrentRace public currentRace;\r\n    GameVars private currentVars;\r\n\r\n    address payable private communityWallet;\r\n    uint16 private currentPosition;\r\n    uint32 private distance;\r\n\r\n    constructor(\r\n        address _minterContract,\r\n        address _communityWallet,\r\n        uint256 _Fee,\r\n        address _vrfCoordinator,\r\n        address _linkToken,\r\n        bytes32 _keyHash,\r\n        uint256 _OracleFee,\r\n        uint32 _distance\r\n    ) VRFConsumerBase( _vrfCoordinator, _linkToken){\r\n        gameLib.setDistance(_distance);\r\n        vrf.LINK = LinkTokenInterface(_linkToken);\r\n        vrf.vrfCoordinator = _vrfCoordinator;\r\n        vrf.linkToken = _linkToken;\r\n        vrf.keyHash = _keyHash;\r\n        vrf.fee = _OracleFee;\r\n        gameLib.setMinter(_minterContract);\r\n        admin = _msgSender();\r\n        communityWallet = payable(_communityWallet);\r\n        pot =0;\r\n        QPFee = _Fee;\r\n        CompFee = _Fee * 5;\r\n        DRFee = _Fee * 25;\r\n        currentPosition = 0;\r\n    }    \r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"You can not call this function\");\r\n        _;\r\n    }\r\n\r\n    function buildVars(uint16[8] memory raptors, uint16[8] memory expandedNums, bool dr) internal returns (GameVars memory gameVars){\r\n        currentVars.raptors = raptors;\r\n        currentVars.expandedNums = expandedNums;\r\n        currentVars.dr = dr;\r\n        gameVars = currentVars;\r\n    }\r\n\r\n    //Select Race\r\n    function raceSelect(uint8 choice)public onlyAdmin{\r\n        require(choice >= 0 && choice <=3);\r\n        currentRace = CurrentRace(choice);\r\n        emit RaceChosen(raceNames[choice]);\r\n    }\r\n\r\n    function _payOut(uint16 winner, uint payout,uint communityPayout) internal {\r\n        payable(gameLib.getOwner(winner)).transfer(payout);\r\n        communityWallet.transfer(communityPayout);\r\n        pot =0;\r\n    }\r\n    \r\n    function getCurrentQueue() public view returns(uint16[8] memory raptors){\r\n        return currentRaptors;\r\n    }\r\n\r\n    //Quickplay Entry\r\n    function enterRaptorIntoQuickPlay(uint16 raptor) public payable {\r\n        //check that current race is enabled\r\n        require(uint(currentRace) == 1, \"This race queue is not available at the moment\");\r\n\r\n\r\n        //check if there are spaces left\r\n        require(currentRaptors[7] ==0, \"You can not join at this time\");\r\n\r\n        //check the raptor is owned by _msgSender()\r\n        require(gameLib.owns(raptor), \"You do not own this raptor\");\r\n\r\n        //check that raptor is not on cooldown\r\n        require(gameLib.getTime(raptor) < block.timestamp, \"Your raptor is not available right now\");\r\n\r\n        //check that msg.value is the entrance fee\r\n        require(msg.value == QPFee, \"You have not sent enough funds\");\r\n\r\n        //add msg.value to pot\r\n        pot += msg.value;\r\n\r\n        //add raptor to the queue\r\n        currentRaptors[currentPosition] = raptor;\r\n\r\n        //increment current Position\r\n        currentPosition += 1;\r\n\r\n        //if 8 entrants then start race\r\n        if(currentPosition ==8){\r\n            getRandomNumber();\r\n            emit QPRandomRequested();\r\n        } \r\n    }\r\n\r\n    //Competitive Entry\r\n    function enterRaptorIntoComp(uint16 raptor) public payable {\r\n        //check that current race is enabled\r\n        require(uint(currentRace) == 2, \"This race queue is not available at the moment\");\r\n\r\n        //check if there are spaces left\r\n        require(currentRaptors[7] ==0, \"You can not join at this time\");\r\n\r\n        //check that raptor is not on cooldown\r\n        require(gameLib.getTime(raptor) < block.timestamp, \"Your raptor is not available right now\");\r\n\r\n        //check the raptor is owned by _msgSender()\r\n        require(gameLib.owns(raptor), \"You do not own this raptor\");\r\n\r\n        //check that msg.value is the entrance fee\r\n        require(msg.value == CompFee, \"You have not sent enough funds\");\r\n\r\n        //add msg.value to pot\r\n        pot += msg.value;\r\n\r\n        //add raptor to the queue\r\n        currentRaptors[currentPosition] = raptor;\r\n\r\n        //increment current Position\r\n        currentPosition += 1;\r\n\r\n        //if 8 entrants then start race\r\n        if(currentPosition == 8){\r\n            getRandomNumber();\r\n            emit CompRandomRequested();\r\n        } \r\n    }\r\n\r\n    //DeathRace Entry\r\n    function enterRaptorIntoDR(uint16 raptor) public payable {\r\n        //check that current race is enabled\r\n        require(uint(currentRace) == 3, \"This race queue is not available at the moment\");\r\n\r\n        //check if there are spaces left\r\n        require(currentRaptors[7] ==0, \"You can not join at this time\");\r\n\r\n        //check that raptor is not on cooldown\r\n        require(gameLib.getTime(raptor) < block.timestamp, \"Your raptor is not available right now\");\r\n\r\n        //check the raptor is owned by _msgSender()\r\n        require(gameLib.owns(raptor), \"You do not own this raptor\");\r\n\r\n        // gameLib._approve(raptor);\r\n\r\n        //check that msg.value is the entrance fee\r\n        require(msg.value == DRFee, \"You have not sent enough funds\");\r\n\r\n        //add msg.value to pot\r\n        pot += msg.value;\r\n\r\n        //add raptor to the queue\r\n        currentRaptors[currentPosition] = raptor;\r\n\r\n        //increment current Position\r\n        currentPosition += 1;\r\n\r\n        //if 8 entrants then start race\r\n        if(currentPosition == 8){\r\n            getRandomNumber();\r\n            emit DRRandomRequested();\r\n        }  \r\n    }\r\n\r\n    function onERC721Received(\r\n        address operator, \r\n        address from, \r\n        uint256 tokenId, \r\n        bytes calldata data) external pure override returns (bytes4) {\r\n        revert();\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n\r\n    //------------------------------------Oracle functions--------------------------------------------//\r\n\r\n    // Requests Randomness\r\n    function getRandomNumber() internal  {\r\n        require(vrf.LINK.balanceOf(address(this)) >= vrf.fee, \"Not enough LINK balance\");\r\n        bytes32 requestId = requestRandomness(vrf.keyHash, vrf.fee);\r\n        vrf.lastRequestId = requestId;\r\n    }\r\n    \r\n    //------------------------------------------Helper Function----------------------------------------------\r\n   \r\n    //generate n random values from random value\r\n    function expand(uint256 _rnd) internal view returns(uint16[8] memory){\r\n        uint16[8] memory expandedValues;\r\n        for(uint8 i = 0; i<8 ; i++){\r\n            expandedValues[i] = uint16(uint256(keccak256(abi.encode(_rnd,i))) % primes[i]);\r\n        }\r\n        return expandedValues;\r\n    }\r\n    //------------------------------------------Helper Function----------------------------------------------\r\n\r\n    //-----------------------------------------Do Not Use These Functions In Your Contract----------------------\r\n    //first function used in callback from VRF\r\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external override{\r\n        require(msg.sender == vrf.vrfCoordinator, \"Only VRFCoordinator can fulfill\");\r\n        fulfillRandomness(requestId, randomness);\r\n    }\r\n\r\n    //callback function used by VRF Coordinator\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n        require(requestId == vrf.lastRequestId, \"Err: WRID\");\r\n        vrf.randomResult = randomness;\r\n        uint16[8] memory expandedNums;\r\n        uint16 winner;\r\n        expandedNums = expand(vrf.randomResult);\r\n        if(uint(currentRace) == 1){\r\n            winner = gameLib._quickPlayStart(buildVars(currentRaptors,expandedNums,false));\r\n            currentPosition = 0;\r\n            _payOut(winner, gameLib.calcPrize(pot), gameLib.calcFee(pot));\r\n            delete currentRace;\r\n            delete currentRaptors;\r\n            delete currentVars;\r\n        }\r\n        else if(uint(currentRace) == 2){\r\n            winner = gameLib._compStart(buildVars(currentRaptors,expandedNums,false));\r\n            currentPosition = 0;\r\n            _payOut(winner, gameLib.calcPrize(pot), gameLib.calcFee(pot));            \r\n            delete currentRace;\r\n            delete currentRaptors;\r\n            delete currentVars;\r\n        }\r\n        else if(uint(currentRace) == 3){\r\n            winner = gameLib._deathRaceStart(buildVars(currentRaptors,expandedNums,true));\r\n            currentPosition = 0;\r\n            _payOut(winner, gameLib.calcPrize(pot), gameLib.calcFee(pot));\r\n            delete currentRace;\r\n            delete currentRaptors;\r\n            delete currentVars;\r\n            // gameLib.removeApproval();\r\n        }\r\n    }\r\n\r\n    //called in request randomness\r\n    function makeVRFInputSeed(\r\n        bytes32 _keyHash,\r\n        uint256 _userSeed,\r\n        address _requester,\r\n        uint256 _nonce\r\n    ) internal pure override returns (uint256) {\r\n        return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\r\n    }\r\n\r\n    //called in requestRandomness\r\n    function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure override returns(bytes32){\r\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\r\n    }\r\n\r\n    //make oracle request\r\n    function requestRandomness(bytes32 _keyHash, uint256 _fee) internal override returns(bytes32 requestId) {\r\n        vrf.LINK.transferAndCall(vrf.vrfCoordinator, _fee,abi.encode(_keyHash, USER_SEED_PLACEHOLDER));        \r\n        uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), vrf.nonces[_keyHash]);\r\n        vrf.nonces[_keyHash] = vrf.nonces[_keyHash] +1;\r\n        requestId = makeRequestId(_keyHash, vRFSeed);\r\n    }\r\n    //-----------------------------------------Do Not Use These Functions In Your Contract----------------------\r\n\r\n\r\n\r\n    function withdrawLink() public onlyAdmin {\r\n        vrf.LINK.transfer(msg.sender, vrf.LINK.balanceOf(address(this)));\r\n    }\r\n\r\n}"
    },
    "contracts/interfaces/IGame.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface IGame {\r\n    function raceSelect(uint8 choice) external;\r\n\r\n    //Quickplay Entry\r\n    function enterRaptorIntoQuickPlay(uint16 raptor) external payable returns (bool);\r\n\r\n    //Competitive Entry\r\n    function enterRaptorIntoComp(uint16 raptor) external payable returns (bool);\r\n\r\n    //DeathRace Entry\r\n    function enterRaptorIntoDR(uint16 raptor) external payable returns(bool);\r\n}"
    },
    "contracts/interfaces/IMinter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"../structs/stats.sol\";\r\n\r\ninterface IMinter {\r\n\r\n    function getPrice(uint8 _amount) external view returns(uint256 givenPrice);\r\n\r\n    function tokenURI(uint16 _tokenId) external view returns(string memory uri);\r\n\r\n    function walletOfOwner(address _wallet) external view returns(uint16[] memory ids);\r\n\r\n    function isFoundingRaptor(uint16 raptor) external view returns(bool);\r\n \r\n    function getSpeed(uint16 _raptor) external view returns(uint16);\r\n\r\n    function getStrength(uint16 _raptor) external view returns(uint16);\r\n\r\n    function getCoolDown(uint16 _raptor) external view returns(uint32 time);\r\n\r\n    function upgradeSpeed(uint16 _raptor, uint8 _amount) external returns(bool);\r\n\r\n    function upgradeStrength(uint16 _raptor, uint8 _amount) external returns(bool);\r\n\r\n    function upgradeAgressiveness(uint16 _raptor, uint8 _amount) external returns(bool);\r\n\r\n    function upgradefightsWon(uint16 _raptor) external returns(bool);\r\n\r\n    function upgradeQPWins(uint16 _raptor) external returns(bool);\r\n\r\n    function upgradeCompWins(uint16 _raptor) external returns(bool);\r\n\r\n    function upgradeDRWins(uint16 _raptor) external returns(bool);\r\n\r\n    function upgradeTop3Finishes(uint16 _raptor) external returns(bool);\r\n\r\n    function increaseCooldownTime(uint16 _raptor, uint32 newTime) external returns(bool);\r\n\r\n\r\n    \r\n\r\n}"
    },
    "contracts/libraries/gameLib.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n\r\nimport \"../structs/stats.sol\";\r\nimport \"../structs/gameVars.sol\";\r\n\r\nimport \"../interfaces/IMinter.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\n\r\nlibrary gameLib {\r\n    //-------------------------Events-------------------------------//\r\n    event InjuredRaptor(uint16 raptor);\r\n    event FightWinner(uint16 raptor);\r\n    event Fighters(uint16[2] fighters);\r\n    event Top3(uint16[3] places);\r\n\r\n    event QuickPlayRaceStarted(uint16[8] raptors);\r\n    event QuickPlayRaceWinner(uint16 raptor);\r\n\r\n    event CompetitiveRaceStarted(uint16[8] raptors);\r\n    event CompetitiveRaceWinner(uint16 raptor);\r\n\r\n    event DeathRaceStarted(uint16[8] raptors);\r\n    event DeathRaceWinner(uint16 raptor);\r\n    event RipRaptor(uint16 raptor);\r\n\r\n    \r\n    //-------------------------Events-------------------------------//\r\n    \r\n    //-------------------------storage----------------------------------//\r\n    //-------------------------minter----------------------------------//\r\n    bytes32 constant minterSlot = keccak256(\"minterAddress\");\r\n\r\n    struct MinterStore{\r\n        address minterContract;\r\n    }\r\n\r\n    function minterStore() internal pure returns(MinterStore storage minter){\r\n        bytes32 slot = minterSlot;\r\n        assembly{\r\n            minter.slot := slot\r\n        }\r\n    }\r\n\r\n    function setMinter(address _minter) internal {\r\n        MinterStore storage store = minterStore();\r\n        store.minterContract = _minter;\r\n    }\r\n    //-------------------------minter----------------------------------//\r\n    //-------------------------distance----------------------------------//\r\n    bytes32 constant distanceSlot = keccak256(\"distance\");\r\n\r\n    struct DistanceStore{\r\n        uint32 distance;\r\n    }\r\n\r\n    function distanceStore() internal pure returns(DistanceStore storage distance){\r\n        bytes32 slot = distanceSlot;\r\n        assembly{\r\n            distance.slot := slot\r\n        }\r\n    }\r\n\r\n    function setDistance(uint32 _distance) internal {\r\n        DistanceStore storage store = distanceStore();\r\n        store.distance = _distance;\r\n    }\r\n    //-------------------------distance----------------------------------//\r\n    //-------------------------storage----------------------------------//\r\n\r\n    //-------------------------Helpers-------------------------------//\r\n\r\n    function getTime(uint16 _raptor) internal view returns (uint32){\r\n        MinterStore storage store = minterStore();\r\n        return IMinter(store.minterContract).getCoolDown(_raptor);\r\n    }\r\n\r\n    //Check if msg.sender owns token\r\n    function owns(uint16 raptor) internal view returns(bool){\r\n        MinterStore storage store = minterStore();\r\n        return (IERC721(store.minterContract).ownerOf(raptor) == msg.sender) ? true : false;\r\n    }\r\n\r\n    function getOwner(uint16 raptor) internal view returns(address){\r\n        MinterStore storage store = minterStore();\r\n        return IERC721(store.minterContract).ownerOf(uint256(raptor));\r\n    }\r\n\r\n    function checkIfFounder(uint16 raptor) internal view returns(bool){\r\n        MinterStore storage store = minterStore();\r\n        return IMinter(store.minterContract).isFoundingRaptor(raptor);\r\n    }\r\n\r\n    function calcFee(uint pool) internal pure returns(uint fee){\r\n        fee = (pool / 100) * 5;\r\n    }\r\n\r\n    function calcPrize(uint pool) internal pure returns (uint prize){\r\n        prize = (pool / 100) * 95;\r\n    }\r\n\r\n    function checkBounds(uint8 input) internal pure returns(bool response){\r\n        (input < 8 && input >= 0) ? response = true : response = false;\r\n    }\r\n\r\n    // function _approve(uint16 raptor) internal {\r\n    //     MinterStore storage store = minterStore();\r\n    //     IERC721(store.minterContract).approve(address(this),raptor);\r\n    // }\r\n\r\n    // function removeApproval() internal {\r\n    //     MinterStore storage store = minterStore();\r\n    //     IERC721(store.minterContract).setApprovalForAll(address(this), false);\r\n    // }\r\n\r\n    function getFighters(GameVars memory gameVars) internal returns(GameVars memory){\r\n        \r\n        gameVars.fighters[0] = uint8(gameVars.expandedNums[0] % 8);\r\n        gameVars.fighters[1] = uint8(gameVars.expandedNums[3] % 8);\r\n\r\n        while(gameVars.fighters[0] == gameVars.fighters[1]){\r\n            bool check = checkBounds(gameVars.fighters[0]);\r\n            if(!check) {\r\n                gameVars.fighters[0] =0 + uint8(gameVars.expandedNums[3] % 7);\r\n            } \r\n        }\r\n\r\n        emit Fighters([gameVars.raptors[gameVars.fighters[0]],gameVars.raptors[gameVars.fighters[1]]]);\r\n\r\n        return gameVars;\r\n\r\n    }\r\n\r\n    //agressiveness & strength not currently factors on who wins the fight\r\n    function getFightWinner(GameVars memory gameVars) internal returns(GameVars memory){\r\n        uint8 index;\r\n        (gameVars.expandedNums[4]%2 == 0) ? index = gameVars.fighters[0] : index = gameVars.fighters[1]; \r\n\r\n        if(index == gameVars.fighters[0]){\r\n            emit FightWinner(gameVars.raptors[gameVars.fighters[0]]);\r\n            gameVars.fightWinner = gameVars.fighters[0];\r\n            if(!gameVars.dr){\r\n                emit InjuredRaptor(gameVars.raptors[gameVars.fighters[1]]);\r\n                addCooldownPeriod(gameVars);\r\n            } else{\r\n                _kill(gameVars.raptors[gameVars.fighters[1]]);\r\n                emit RipRaptor(gameVars.raptors[gameVars.fighters[1]]);\r\n            }\r\n        }else{\r\n            gameVars.fightWinner = gameVars.fighters[1];\r\n            emit FightWinner(gameVars.raptors[gameVars.fighters[1]]);\r\n            if(!gameVars.dr){\r\n                addCooldownPeriod(gameVars);\r\n                emit InjuredRaptor(gameVars.raptors[gameVars.fighters[0]]);\r\n            } else{\r\n                _kill(gameVars.raptors[gameVars.fighters[0]]);\r\n                emit RipRaptor(gameVars.raptors[gameVars.fighters[0]]);\r\n            }\r\n        }\r\n        return gameVars;\r\n    }\r\n\r\n    function getFastest(uint8[2] memory fighters,uint32[8] memory time) internal pure returns (uint8[3] memory){\r\n        uint16 lowest=20000;\r\n        uint8[3] memory places;\r\n        uint8 i = 0;\r\n        for(; i< 8; i++){\r\n            if(i != fighters[0] && i != fighters[1]){\r\n                if(time[i]<lowest){\r\n                    lowest = uint16(time[i]); \r\n                    places[0] = i;           \r\n                }\r\n            }\r\n        }\r\n        lowest = 20000;\r\n        i = 0;\r\n        for(; i< 8; i++){\r\n            if(i != fighters[0] && i != fighters[1] && i != places[0]){\r\n                if(time[i]<lowest){\r\n                    lowest = uint16(time[i]); \r\n                    places[1] = i;           \r\n                }\r\n            }\r\n        }\r\n        lowest = 20000;\r\n        i = 0;\r\n        for(; i< 8; i++){\r\n            if(i != fighters[0] && i != fighters[1] && i != places[0] && i != places[2]){\r\n                if(time[i]<lowest){\r\n                    lowest = uint16(time[i]); \r\n                    places[2] = i;            \r\n                }\r\n            }\r\n        }\r\n        return places;\r\n    }\r\n\r\n    function getWinner(GameVars memory gameVars) internal view returns(GameVars memory){\r\n        require(gameVars.expandedNums.length == 8, \"IRNL\");\r\n        uint8 i = 0;\r\n        uint16[8] memory speed;\r\n        address minter = minterStore().minterContract;\r\n        //get stats for each raptor\r\n        for (; i<8;i++){\r\n            speed[i] = IMinter(minter).getSpeed(gameVars.raptors[i]);\r\n        }\r\n\r\n        //get randomness for each raptor\r\n        //calc times to finish the race first with added randomness\r\n        i =0;\r\n        uint8[8] memory randomness;\r\n        uint32[8] memory time;\r\n        uint32 distance = distanceStore().distance;\r\n        for(; i< 8; i++){\r\n            randomness[i] = uint8(gameVars.expandedNums[i] % 5);\r\n            time[i] = distance / (speed[i] + randomness[i]);\r\n        }      \r\n        \r\n        //gets fastest indexes & ignores fighter indexes\r\n        gameVars.places = getFastest(gameVars.fighters, time);\r\n        return gameVars;\r\n    }\r\n\r\n    //-------------------------Helpers--------------------------------//\r\n\r\n    //------------------------Stat-Changes------------------------------//\r\n                       // -------  +vary ----------//\r\n\r\n    function upgradeStrength(GameVars memory gameVars) internal {\r\n        uint8 rand = uint8(gameVars.expandedNums[4] %3) +1;\r\n        address minter = minterStore().minterContract;\r\n        uint8 index;\r\n        (gameVars.fightWinner == gameVars.fighters[0]) ? (index = 0) : (index = 1);\r\n        bool success = IMinter(minter).upgradeStrength(gameVars.raptors[index], rand);\r\n        require(success, \"USt\");\r\n    }\r\n\r\n    function upgradeSpeed(GameVars memory gameVars) internal {\r\n        uint8 rand = uint8(gameVars.expandedNums[7] %3) +1;\r\n        address minter = minterStore().minterContract;\r\n        bool success = IMinter(minter).upgradeSpeed(gameVars.raptors[gameVars.places[0]],rand);\r\n        require(success, \"USp\");\r\n    }\r\n                       // -------  +Vary ----------//\r\n\r\n                       // -------  +1 ----------//\r\n    function increaseQPWins(GameVars memory gameVars) internal {\r\n        address minter = minterStore().minterContract;\r\n        bool success = IMinter(minter).upgradeQPWins(gameVars.raptors[gameVars.places[0]]);\r\n        require(success, \"QW\");\r\n    }\r\n\r\n    function increaseCompWins(GameVars memory gameVars) internal {\r\n        address minter = minterStore().minterContract;\r\n        bool success = IMinter(minter).upgradeCompWins(gameVars.raptors[gameVars.places[0]]);\r\n        require(success, \"CW\");\r\n    }\r\n\r\n    function increaseDeathRaceWins(GameVars memory gameVars) internal {\r\n        address minter = minterStore().minterContract;\r\n        bool success = IMinter(minter).upgradeDRWins(gameVars.raptors[gameVars.places[0]]);\r\n        require(success, \"DW\");\r\n    }\r\n\r\n    function increaseTop3RaceFinishes(GameVars memory gameVars) internal {\r\n        address minter = minterStore().minterContract;\r\n        for(uint i = 0; i < 3; i++){\r\n            bool success = IMinter(minter).upgradeTop3Finishes(gameVars.raptors[gameVars.places[i]]);\r\n            require(success, \"T3\");\r\n        }\r\n    }\r\n                       // -------  +1 ----------//\r\n\r\n         // -----  +12 Hours/ Unless Founding Raptor 6 Hours -----//\r\n    \r\n    function addCooldownPeriod(GameVars memory gameVars) internal {\r\n        address minter = minterStore().minterContract;\r\n        uint8 index;\r\n        (gameVars.fightWinner == gameVars.fighters[0]) ? (index = 1) : (index = 0);\r\n        bool check = checkIfFounder(gameVars.raptors[index]);\r\n        uint32 newTime;\r\n        (check) ? (newTime = 6 hours) : (newTime = 12 hours);\r\n        bool success = IMinter(minter).increaseCooldownTime(gameVars.raptors[gameVars.fighters[index]], newTime);\r\n        require(success, \"CD\");\r\n    }\r\n         // -----  +12 Hours/ Unless Founding Raptor 6 Hours -----//\r\n    //------------------------Stat-Changes---------------------------------//\r\n\r\n    //-----------------------------QP--------------------------------------//\r\n\r\n    //QP Start\r\n    function _quickPlayStart(GameVars memory gameVars) internal returns (uint16){\r\n        require(gameVars.expandedNums.length == 8,\"Err: IRL\");\r\n        emit QuickPlayRaceStarted(gameVars.raptors);\r\n        \r\n        //gets fighters, finds the winner & adds them to indexes to ignore for choosing winner\r\n        gameVars = getFighters(gameVars);\r\n        gameVars = getFightWinner(gameVars);\r\n        //gets the winner & next two places\r\n        gameVars = getWinner(gameVars);\r\n        \r\n        emit Top3([gameVars.raptors[gameVars.places[0]],gameVars.raptors[gameVars.places[1]],gameVars.raptors[gameVars.places[2]]]);\r\n        \r\n        handleQPStats(gameVars);\r\n\r\n\r\n        emit QuickPlayRaceWinner(gameVars.raptors[gameVars.places[0]]);\r\n\r\n        return gameVars.raptors[gameVars.places[0]];\r\n\r\n    }\r\n\r\n    function handleQPStats(GameVars memory gameVars) internal {\r\n        increaseQPWins(gameVars);\r\n        upgradeSpeed(gameVars);\r\n        increaseTop3RaceFinishes(gameVars);\r\n        upgradeStrength(gameVars);\r\n    }\r\n\r\n    //---------------------------QP--------------------------------------//\r\n    //----------------------------Comp-----------------------------------//\r\n\r\n    // //Comp Start\r\n    function _compStart(GameVars memory gameVars) internal returns(uint16){\r\n        require(gameVars.expandedNums.length == 8);\r\n        emit CompetitiveRaceStarted(gameVars.raptors);\r\n\r\n        //gets fighters, finds the winner & adds them to indexes to ignore for choosing winner\r\n        gameVars = getFighters(gameVars);\r\n        gameVars = getFightWinner(gameVars);\r\n        //gets the winner & next two places\r\n        gameVars = getWinner(gameVars);\r\n        emit Top3([gameVars.raptors[gameVars.places[0]],gameVars.raptors[gameVars.places[1]],gameVars.raptors[gameVars.places[2]]]);\r\n        \r\n        //modify states //index 0 = winner; index 1 = second; index 2 = third\r\n        \r\n        handleCompStats(gameVars);       \r\n\r\n\r\n        emit CompetitiveRaceWinner(gameVars.raptors[gameVars.places[0]]);\r\n\r\n        return gameVars.raptors[gameVars.places[0]];\r\n\r\n    }\r\n\r\n    function handleCompStats(GameVars memory gameVars) internal {\r\n        increaseCompWins(gameVars);\r\n        upgradeSpeed(gameVars);\r\n        increaseTop3RaceFinishes(gameVars);\r\n        upgradeStrength(gameVars);\r\n    }\r\n\r\n    // //---------------------------------Comp--------------------------------//\r\n    // //-------------------------------DR------------------------------------//\r\n\r\n    // //DR Start\r\n    function _deathRaceStart(GameVars memory gameVars) internal returns(uint16){\r\n        require(gameVars.expandedNums.length == 8);\r\n        emit DeathRaceStarted(gameVars.raptors);\r\n\r\n        //gets fighters, finds the winner & adds them to indexes to ignore for choosing winner\r\n        gameVars = getFighters(gameVars);\r\n        gameVars = getFightWinner(gameVars);\r\n        //gets the winner & next two places\r\n        gameVars = getWinner(gameVars);\r\n        emit Top3([gameVars.raptors[gameVars.places[0]],gameVars.raptors[gameVars.places[1]],gameVars.raptors[gameVars.places[2]]]);\r\n        \r\n        handleDRStats(gameVars);\r\n\r\n        emit DeathRaceWinner(gameVars.raptors[gameVars.places[0]]);\r\n\r\n        return gameVars.raptors[gameVars.places[0]];\r\n    }\r\n\r\n    // //DR Kill/BURN RAPTOR\r\n    function _kill(uint16 raptor) internal {\r\n        MinterStore storage store = minterStore();\r\n        IERC721(store.minterContract).safeTransferFrom(getOwner(raptor),address(0),uint256(raptor));\r\n    }\r\n\r\n    function handleDRStats(GameVars memory gameVars) internal {\r\n        increaseCompWins(gameVars);\r\n        upgradeSpeed(gameVars);\r\n        increaseTop3RaceFinishes(gameVars);\r\n        upgradeStrength(gameVars);\r\n    }\r\n\r\n    // //---------------------------------------DR----------------------------//\r\n\r\n\r\n}"
    },
    "contracts/structs/stats.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n\r\nstruct Stats{\r\n    uint16 speed;\r\n    uint16 strength;\r\n    uint16 fightsWon;\r\n    uint16 quickPlayRacesWon;\r\n    uint16 compRacesWon;\r\n    uint16 deathRacesWon;\r\n    uint16 totalRacesTop3Finish;\r\n    uint32 cooldownTime;\r\n}"
    },
    "contracts/structs/gameVars.sol": {
      "content": "pragma solidity ^0.8.7;\r\n\r\nstruct GameVars {\r\n    uint16[8] raptors;\r\n    uint16[8] expandedNums;\r\n    uint8[2] fighters;\r\n    uint8 fightWinner;\r\n    uint8[3] places;\r\n    bool dr;\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./interfaces/LinkTokenInterface.sol\";\n\nimport \"./VRFRequestIDBase.sol\";\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\n * @dev want to generate randomness from.\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomness method.\n *\n * @dev The randomness argument to fulfillRandomness is the actual random value\n * @dev generated from your seed.\n *\n * @dev The requestId argument is generated from the keyHash and the seed by\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\n * @dev requests open, you can use the requestId to track which seed is\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\n * @dev details. (See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.)\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ. (Which is critical to making unpredictable randomness! See the\n * @dev next section.)\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\n * @dev block in which the request is made, user-provided seeds have no impact\n * @dev on its economic security properties. They are only included for API\n * @dev compatability with previous versions of this contract.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request.\n */\nabstract contract VRFConsumerBase is VRFRequestIDBase {\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomness the VRF output\n   */\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\n\n  /**\n   * @dev In order to keep backwards compatibility we have kept the user\n   * seed field around. We remove the use of it because given that the blockhash\n   * enters later, it overrides whatever randomness the used seed provides.\n   * Given that it adds no security, and can easily lead to misunderstandings,\n   * we have removed it from usage and can now provide a simpler API.\n   */\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\n\n  /**\n   * @notice requestRandomness initiates a request for VRF output given _seed\n   *\n   * @dev The fulfillRandomness method receives the output, once it's provided\n   * @dev by the Oracle, and verified by the vrfCoordinator.\n   *\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\n   * @dev the _fee must exceed the fee specified during registration of the\n   * @dev _keyHash.\n   *\n   * @dev The _seed parameter is vestigial, and is kept only for API\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\n   * @dev your own randomness, here, but it's not necessary because the VRF\n   * @dev oracle will mix the hash of the block containing your request into the\n   * @dev VRF seed it ultimately uses.\n   *\n   * @param _keyHash ID of public key against which randomness is generated\n   * @param _fee The amount of LINK to send with the request\n   *\n   * @return requestId unique ID for this request\n   *\n   * @dev The returned requestId can be used to distinguish responses to\n   * @dev concurrent requests. It is passed as the first argument to\n   * @dev fulfillRandomness.\n   */\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal virtual returns (bytes32 requestId) {\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\n    // the hash of the block containing this request to obtain the seed/input\n    // which is finally passed to the VRF cryptographic machinery.\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\n    // nonces[_keyHash] must stay in sync with\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\n    // This provides protection against the user repeating their input seed,\n    // which would result in a predictable/duplicate output, if multiple such\n    // requests appeared in the same block.\n    nonces[_keyHash] = nonces[_keyHash] + 1;\n    return makeRequestId(_keyHash, vRFSeed);\n  }\n\n  LinkTokenInterface internal immutable LINK;\n  address private immutable vrfCoordinator;\n\n  // Nonces for each VRF key from which randomness has been requested.\n  //\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\n    private nonces;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   * @param _link address of LINK token contract\n   *\n   * @dev https://docs.chain.link/docs/link-token-contracts\n   */\n  constructor(address _vrfCoordinator, address _link) {\n    vrfCoordinator = _vrfCoordinator;\n    LINK = LinkTokenInterface(_link);\n  }\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external virtual {\n    require(msg.sender == vrfCoordinator, \"Only VRFCoordinator can fulfill\");\n    fulfillRandomness(requestId, randomness);\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VRFRequestIDBase {\n  /**\n   * @notice returns the seed which is actually input to the VRF coordinator\n   *\n   * @dev To prevent repetition of VRF output due to repetition of the\n   * @dev user-supplied seed, that seed is combined in a hash with the\n   * @dev user-specific nonce, and the address of the consuming contract. The\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\n   * @dev the final seed, but the nonce does protect against repetition in\n   * @dev requests which are included in a single block.\n   *\n   * @param _userSeed VRF seed input provided by user\n   * @param _requester Address of the requesting contract\n   * @param _nonce User-specific nonce at the time of the request\n   */\n  function makeVRFInputSeed(\n    bytes32 _keyHash,\n    uint256 _userSeed,\n    address _requester,\n    uint256 _nonce\n  ) internal pure virtual returns (uint256) {\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\n  }\n\n  /**\n   * @notice Returns the id for this request\n   * @param _keyHash The serviceAgreement ID to be used for this request\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\n   * @return The id for this request\n   *\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\n   * @dev contract, but the one generated by makeVRFInputSeed\n   */\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure virtual returns (bytes32) {\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\n  }\n}\n"
    },
    "contracts/minter.sol": {
      "content": "//SPDF-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"./interfaces/IMinter.sol\";\r\n\r\nimport \"./libraries/minterLib.sol\";\r\n\r\nimport \"./structs/stats.sol\";\r\n\r\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\";\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\r\n\r\ncontract MinterV3 is ERC721Enumerable, VRFConsumerBase {\r\n\r\n    event PorscheWinner(address winner);\r\n    event gotHere(uint8);\r\n\r\n    address private admin;\r\n    \r\n    bool private active;\r\n    string private baseURI = \"https://gateway.pinata.cloud/\";\r\n    string private CID = \"Some CID/\";\r\n    string private extension = \".JSON\";\r\n    string private notRevealed = \"NotRevealed Hash\";\r\n\r\n    bytes32 private lastRequestId;\r\n    bytes32 private keyHash;\r\n    uint256 private fee;\r\n\r\n    mapping(uint16 => Stats) public raptorStats;\r\n\r\n    uint256 private price = 2 * 10**18;\r\n    uint16 private totalMintSupply = 0;\r\n    uint16 private totalLimit = 10000;\r\n\r\n    bool private revealed;\r\n\r\n    address private gameAddress;\r\n    address private cooldownContract;\r\n\r\n    //commented out for testing\r\n    // address[] rewardedAddresses = [\r\n    //     //holders of racing raptors v1 NFTs \r\n\r\n    // ];\r\n\r\n    address[] rewardedAddresses;\r\n\r\n    uint8[] rewardedAmounts = [\r\n        1,1,1,1,1,1,1,1\r\n    ];\r\n\r\n    address[] private paymentsTo;\r\n\r\n    mapping(uint16 => bool) private foundingRaptor;\r\n\r\n    constructor(\r\n        address[] memory _rewardedAddresses,\r\n        address[] memory _paymentsTo,\r\n        address _vrfCoordinator,\r\n        address _linkToken,\r\n        bytes32 _keyHash,\r\n        uint256 _OracleFee\r\n        )ERC721(\"Racing Raptors V2\", \"RR\") VRFConsumerBase( _vrfCoordinator, _linkToken){\r\n            keyHash = _keyHash;\r\n            fee = _OracleFee;\r\n            rewardedAddresses = _rewardedAddresses;\r\n            active = true;\r\n            admin = _msgSender();\r\n            paymentsTo = _paymentsTo;\r\n            reward();\r\n    }\r\n\r\n    function updateGameAddress(address _gameAddress) public onlyAdmin {\r\n        setApprovalForAll(gameAddress, false);\r\n        gameAddress = _gameAddress;\r\n        setApprovalForAll(gameAddress, true);\r\n    }\r\n\r\n    function updateCooldownAddress(address _coolDown) public onlyAdmin {\r\n        cooldownContract = _coolDown;\r\n    }\r\n\r\n    function updatePaymentTo(address _paymentTo, uint8 index) public onlyAdmin {\r\n        paymentsTo[index] = _paymentTo;\r\n    }\r\n\r\n    function getPrice(uint8 _amount) public view  returns(uint256){\r\n        return minterLib.getPrice(_amount, price, totalMintSupply);\r\n    }\r\n\r\n    modifier onlyAdmin{\r\n        require(_msgSender() == admin, \"A\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyGameAddress{\r\n        require(_msgSender() == gameAddress, \"GC\");\r\n        _;\r\n    }\r\n\r\n    function reveal() onlyAdmin public {\r\n        revealed = true;\r\n    }\r\n\r\n    function flipSaleState() public onlyAdmin {\r\n        active = !active;\r\n    }\r\n\r\n    function setAdmin(address _admin) public onlyAdmin{\r\n        admin = _admin;\r\n    }\r\n\r\n    function tokenURI(uint16 _tokenId) public view virtual returns(string memory uri){\r\n        require(_exists(_tokenId), \"DE\");\r\n\r\n        if(!revealed) {uri = string(abi.encodePacked(baseURI, notRevealed));}\r\n        else{uri = string(abi.encodePacked(baseURI, CID, string(abi.encodePacked(_tokenId)), extension));}\r\n\r\n    }\r\n\r\n    function splitFunds(uint256 fundsToSplit) public payable {\r\n        require(fundsToSplit <= address(this).balance, \"IB\");\r\n        require(payable(paymentsTo[0]).send(fundsToSplit * 25/100));\r\n        require(payable(paymentsTo[1]).send(fundsToSplit * 50/100));\r\n        require(payable(paymentsTo[2]).send(fundsToSplit * 25/100));\r\n    }\r\n\r\n    receive() external payable {\r\n        splitFunds(msg.value);\r\n    }\r\n\r\n    function mint(uint8 _amount) public payable {\r\n        require(active, \"NA\");\r\n\r\n        if(_msgSender() != admin){\r\n            require(msg.value == getPrice(_amount),\"Pay\");\r\n            if(minterLib.crossesThreshold(_amount, totalMintSupply)){ \r\n                price = minterLib.updatePrice(price);\r\n            } \r\n            splitFunds(msg.value);\r\n        }\r\n\r\n        require(_amount <= 10, \"MM\");\r\n        require(totalMintSupply + _amount <= totalLimit, \"Cap\");\r\n        \r\n        for(uint8 i =0; i< _amount; i++){\r\n            totalMintSupply += 1;\r\n            _mint(_msgSender(), totalMintSupply);\r\n            approve(gameAddress, totalMintSupply);\r\n            raptorStats[totalMintSupply] = Stats(1,1,0,0,0,0,0,uint32(block.timestamp));\r\n            if(totalMintSupply == totalLimit) {\r\n                getRandomNumber();\r\n            }\r\n        }\r\n    }\r\n\r\n    function walletOfOwner(address _wallet) public view  returns(uint16[] memory ids){\r\n        uint16 ownerTokenCount = uint16(balanceOf(_wallet));\r\n        ids = new uint16[](ownerTokenCount);\r\n        for(uint16 i = 0; i< ownerTokenCount; i++){\r\n            ids[i] = uint16(tokenOfOwnerByIndex(_wallet, i));\r\n        }\r\n    }\r\n\r\n    function isFoundingRaptor(uint16 raptor) external view returns(bool){\r\n        return foundingRaptor[raptor];\r\n    }\r\n\r\n    function getCoolDown(uint16 _raptor) external view  returns(uint32){\r\n        return raptorStats[_raptor].cooldownTime;\r\n    }\r\n\r\n    function getSpeed(uint16 _raptor) external view  returns(uint16){\r\n        return raptorStats[_raptor].speed;\r\n    }\r\n\r\n    function getStrength(uint16 _raptor) external view  returns(uint16){\r\n        return raptorStats[_raptor].strength;\r\n    }\r\n\r\n    function upgradeSpeed(uint16 _raptor, uint8 _amount) external onlyGameAddress  returns(bool){\r\n        raptorStats[_raptor].speed += _amount;\r\n        return true;\r\n    }\r\n\r\n    function upgradeStrength(uint16 _raptor, uint8 _amount) external onlyGameAddress  returns(bool){\r\n        raptorStats[_raptor].strength += _amount;\r\n        return true;\r\n    }\r\n\r\n    function upgradeFightsWon(uint16 _raptor) external onlyGameAddress  returns(bool){\r\n        raptorStats[_raptor].fightsWon += 1;\r\n        return true;\r\n    }\r\n\r\n    function upgradeQPWins(uint16 _raptor) external onlyGameAddress  returns(bool){\r\n        raptorStats[_raptor].quickPlayRacesWon += 1;\r\n        return true;\r\n    }\r\n\r\n    function upgradeCompWins(uint16 _raptor) external onlyGameAddress  returns(bool){\r\n        raptorStats[_raptor].compRacesWon += 1;\r\n        return true;\r\n    }\r\n\r\n    function upgradeDRWins(uint16 _raptor) external onlyGameAddress  returns(bool){\r\n        raptorStats[_raptor].deathRacesWon += 1;\r\n        return true;\r\n    }\r\n\r\n    function upgradeTop3Finishes(uint16 _raptor) external onlyGameAddress  returns(bool){\r\n        raptorStats[_raptor].totalRacesTop3Finish += 1;\r\n        return true;\r\n    }\r\n\r\n    function increaseCooldownTime(uint16 _raptor, uint32 newTime) external onlyGameAddress  returns(bool){\r\n        raptorStats[_raptor].cooldownTime = uint32(block.timestamp) + newTime;\r\n        return true;\r\n    }\r\n\r\n    function resetCooldown(uint16 _raptor) external returns (bool) {\r\n        require(msg.sender == cooldownContract);\r\n        raptorStats[_raptor].cooldownTime = uint32(block.timestamp);\r\n        return true;\r\n    }\r\n\r\n    function reward() internal {\r\n        for(uint8 i = 0; i < rewardedAddresses.length; i++){\r\n            for (uint8 j = 0; j < rewardedAmounts[i]; j++){\r\n                totalMintSupply +=1;\r\n                _mint(rewardedAddresses[i], totalMintSupply);\r\n                _approve(gameAddress, totalMintSupply);\r\n                raptorStats[totalMintSupply] = Stats(1,1,0,0,0,0,0,uint32(block.timestamp));\r\n                foundingRaptor[totalMintSupply] = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    //Oracle functions\r\n    function getRandomNumber() internal {\r\n        require(LINK.balanceOf(address(this)) >= fee, \" LB\");\r\n        requestRandomness(keyHash, fee);\r\n    }\r\n\r\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\r\n        uint winner = randomness %10000;\r\n        emit PorscheWinner(ownerOf(winner));\r\n    }\r\n    //Oracle Functions\r\n\r\n}"
    },
    "contracts/libraries/minterLib.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n\r\nlibrary minterLib {\r\n\r\n    event PriceIncrease(uint newPrice);\r\n\r\n    function updatePrice(uint _price)internal returns(uint price) {\r\n        price = _price << 1;\r\n        emit PriceIncrease(price);\r\n    }\r\n\r\n    function crossesThreshold(uint _amount, uint _totalSupply) internal pure returns (bool){\r\n        if(_totalSupply+_amount < 1000) return false;\r\n        uint remainder = (_totalSupply + _amount) % 1000;\r\n        if(remainder >= 0 && remainder < 10) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    function getAmounts(uint _amount, uint _totalSupply) internal pure returns(uint8 amountBefore, uint8 amountAfter){\r\n        for (uint i = 0; i < _amount; i++){\r\n            if (crossesThreshold(i+1,_totalSupply)){\r\n                amountBefore = uint8(i +1);\r\n                amountAfter = uint8(_amount-amountBefore);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    function getPrice(uint8 _amount, uint price, uint16 totalMintSupply) internal pure returns(uint256 givenPrice){\r\n        require(_amount <= 10, \"Err: Too high\");\r\n        bool answer = crossesThreshold(_amount,totalMintSupply);\r\n        if(answer){\r\n            (uint8 amountBefore, uint8 amountAfter) = getAmounts(_amount,totalMintSupply);\r\n            givenPrice = (price*amountBefore) + (price * 2 * amountAfter);\r\n        } else {\r\n            givenPrice = price * _amount;\r\n        }\r\n    }\r\n}"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"./IERC721Enumerable.sol\";\n\n/**\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n * enumerability of all the token ids in the contract as well as all token ids owned by each\n * account.\n */\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n    // Mapping from owner to list of owned token IDs\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n\n    // Mapping from token ID to index of the owner tokens list\n    mapping(uint256 => uint256) private _ownedTokensIndex;\n\n    // Array with all token ids, used for enumeration\n    uint256[] private _allTokens;\n\n    // Mapping from token id to position in the allTokens array\n    mapping(uint256 => uint256) private _allTokensIndex;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721.balanceOf(owner), \"ERC721Enumerable: owner index out of bounds\");\n        return _ownedTokens[owner][index];\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _allTokens.length;\n    }\n\n    /**\n     * @dev See {IERC721Enumerable-tokenByIndex}.\n     */\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n        require(index < ERC721Enumerable.totalSupply(), \"ERC721Enumerable: global index out of bounds\");\n        return _allTokens[index];\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual override {\n        super._beforeTokenTransfer(from, to, tokenId);\n\n        if (from == address(0)) {\n            _addTokenToAllTokensEnumeration(tokenId);\n        } else if (from != to) {\n            _removeTokenFromOwnerEnumeration(from, tokenId);\n        }\n        if (to == address(0)) {\n            _removeTokenFromAllTokensEnumeration(tokenId);\n        } else if (to != from) {\n            _addTokenToOwnerEnumeration(to, tokenId);\n        }\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n     * @param to address representing the new owner of the given token ID\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n     */\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n        uint256 length = ERC721.balanceOf(to);\n        _ownedTokens[to][length] = tokenId;\n        _ownedTokensIndex[tokenId] = length;\n    }\n\n    /**\n     * @dev Private function to add a token to this extension's token tracking data structures.\n     * @param tokenId uint256 ID of the token to be added to the tokens list\n     */\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n        _allTokensIndex[tokenId] = _allTokens.length;\n        _allTokens.push(tokenId);\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n     * @param from address representing the previous owner of the given token ID\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n     */\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary\n        if (tokenIndex != lastTokenIndex) {\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n        }\n\n        // This also deletes the contents at the last position of the array\n        delete _ownedTokensIndex[tokenId];\n        delete _ownedTokens[from][lastTokenIndex];\n    }\n\n    /**\n     * @dev Private function to remove a token from this extension's token tracking data structures.\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\n     */\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n        // then delete the last slot (swap and pop).\n\n        uint256 lastTokenIndex = _allTokens.length - 1;\n        uint256 tokenIndex = _allTokensIndex[tokenId];\n\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\n\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n\n        // This also deletes the contents at the last position of the array\n        delete _allTokensIndex[tokenId];\n        _allTokens.pop();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Enumerable is IERC721 {\n    /**\n     * @dev Returns the total amount of tokens stored by the contract.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n     */\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\n\n    /**\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n     * Use along with {totalSupply} to enumerate all tokens.\n     */\n    function tokenByIndex(uint256 index) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "contracts/interfaces/LinkInterface.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\ninterface LinkTokenInterface {\r\n\r\n  function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n  /**\r\n  * @dev transfer token to a specified address with additional data if the recipient is a contract.\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  * @param _data The extra data to be passed to the receiving contract.\r\n  */\r\n  function transferAndCall(address _to, uint _value, bytes calldata _data) external returns (bool success);\r\n\r\n  /**\r\n  * @dev transfer token to a specified address.\r\n  * @param _to The address to transfer to.\r\n  * @param _value The amount to be transferred.\r\n  */\r\n  function transfer(address _to, uint _value) external returns (bool success);\r\n\r\n  /**\r\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n   * @param _spender The address which will spend the funds.\r\n   * @param _value The amount of tokens to be spent.\r\n   */\r\n  function approve(address _spender, uint256 _value) external returns (bool);\r\n\r\n  /**\r\n   * @dev Transfer tokens from one address to another\r\n   * @param _from address The address which you want to send tokens from\r\n   * @param _to address The address which you want to transfer to\r\n   * @param _value uint256 the amount of tokens to be transferred\r\n   */\r\n  function transferFrom(address _from, address _to, uint256 _value) external returns (bool);\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}