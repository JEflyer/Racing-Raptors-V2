{
  "address": "0x23Fc0008B8660705b8a01a3D3F96dA7EC7643D5B",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minterContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_communityWallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_Fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_linkToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_OracleFee",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_distance",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CompRandomRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[8]",
          "name": "raptors",
          "type": "uint16[8]"
        }
      ],
      "name": "CompetitiveRaceStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "raptor",
          "type": "uint16"
        }
      ],
      "name": "CompetitiveRaceWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "DRRandomRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[8]",
          "name": "raptors",
          "type": "uint16[8]"
        }
      ],
      "name": "DeathRaceStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "raptor",
          "type": "uint16"
        }
      ],
      "name": "DeathRaceWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "raptor",
          "type": "uint16"
        }
      ],
      "name": "FightWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[2]",
          "name": "fighters",
          "type": "uint16[2]"
        }
      ],
      "name": "Fighters",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "raptor",
          "type": "uint16"
        }
      ],
      "name": "InjuredRaptor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "QPRandomRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[8]",
          "name": "raptors",
          "type": "uint16[8]"
        }
      ],
      "name": "QuickPlayRaceStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "raptor",
          "type": "uint16"
        }
      ],
      "name": "QuickPlayRaceWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "raceType",
          "type": "string"
        }
      ],
      "name": "RaceChosen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "raptor",
          "type": "uint16"
        }
      ],
      "name": "RipRaptor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16[3]",
          "name": "places",
          "type": "uint16[3]"
        }
      ],
      "name": "Top3",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "raptor",
          "type": "uint16"
        },
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "speed",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "strength",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "fightsWon",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "quickPlayRacesWon",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "compRacesWon",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "deathRacesWon",
              "type": "uint16"
            },
            {
              "internalType": "uint16",
              "name": "totalRacesTop3Finish",
              "type": "uint16"
            },
            {
              "internalType": "uint32",
              "name": "cooldownTime",
              "type": "uint32"
            }
          ],
          "indexed": false,
          "internalType": "struct Stats",
          "name": "stats",
          "type": "tuple"
        }
      ],
      "name": "UpdatedStats",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CompFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DRFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QPFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRace",
      "outputs": [
        {
          "internalType": "enum GameV3.CurrentRace",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "currentRaptors",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "raptor",
          "type": "uint16"
        }
      ],
      "name": "enterRaptorIntoComp",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "raptor",
          "type": "uint16"
        }
      ],
      "name": "enterRaptorIntoDR",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "raptor",
          "type": "uint16"
        }
      ],
      "name": "enterRaptorIntoQuickPlay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentQueue",
      "outputs": [
        {
          "internalType": "uint16[8]",
          "name": "raptors",
          "type": "uint16[8]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "choice",
          "type": "uint8"
        }
      ],
      "name": "raceSelect",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "randomness",
          "type": "uint256"
        }
      ],
      "name": "rawFulfillRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b6bae35e5d29ab8ff50d775c49e5a2eef78f0b59dca3d857614ea12e930cc58",
  "receipt": {
    "to": null,
    "from": "0x589af839fa81de74f5B769297B9Ef0F7F9e171b7",
    "contractAddress": "0x23Fc0008B8660705b8a01a3D3F96dA7EC7643D5B",
    "transactionIndex": 9,
    "gasUsed": "5297773",
    "logsBloom": "0x
    "blockHash": "0xbbb14660e4dccdf710864232da502d3ceecf360bd14db9b7309566d9a2fad7f2",
    "transactionHash": "0x3b6bae35e5d29ab8ff50d775c49e5a2eef78f0b59dca3d857614ea12e930cc58",
    "logs": [],
    "blockNumber": 10279236,
    "cumulativeGasUsed": "6837010",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa65dd0666774aaad80bf6f98bdfb5ebc1d5244b5",
    "0xc5DDFA987557e3C36AD6aB9685595420666790E0",
    "1000000000000000",
    "0xb3dCcb4Cf7a26f6cf6B120Cf5A73875B7BBc655B",
    "0x01BE23585060835E02B77ef475b0Cc51aA1e0709",
    "0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311",
    "100000000000000000",
    1000
  ],
  "numDeployments": 2,
  "solcInputHash": "d89298f5199ba6f81b4a425a9716140a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minterContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_communityWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_Fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_linkToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_OracleFee\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_distance\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CompRandomRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[8]\",\"name\":\"raptors\",\"type\":\"uint16[8]\"}],\"name\":\"CompetitiveRaceStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"raptor\",\"type\":\"uint16\"}],\"name\":\"CompetitiveRaceWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DRRandomRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[8]\",\"name\":\"raptors\",\"type\":\"uint16[8]\"}],\"name\":\"DeathRaceStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"raptor\",\"type\":\"uint16\"}],\"name\":\"DeathRaceWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"raptor\",\"type\":\"uint16\"}],\"name\":\"FightWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[2]\",\"name\":\"fighters\",\"type\":\"uint16[2]\"}],\"name\":\"Fighters\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"raptor\",\"type\":\"uint16\"}],\"name\":\"InjuredRaptor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"QPRandomRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[8]\",\"name\":\"raptors\",\"type\":\"uint16[8]\"}],\"name\":\"QuickPlayRaceStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"raptor\",\"type\":\"uint16\"}],\"name\":\"QuickPlayRaceWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"raceType\",\"type\":\"string\"}],\"name\":\"RaceChosen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"raptor\",\"type\":\"uint16\"}],\"name\":\"RipRaptor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16[3]\",\"name\":\"places\",\"type\":\"uint16[3]\"}],\"name\":\"Top3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"raptor\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"speed\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"strength\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"fightsWon\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"quickPlayRacesWon\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"compRacesWon\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"deathRacesWon\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"totalRacesTop3Finish\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"cooldownTime\",\"type\":\"uint32\"}],\"indexed\":false,\"internalType\":\"struct Stats\",\"name\":\"stats\",\"type\":\"tuple\"}],\"name\":\"UpdatedStats\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CompFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DRFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QPFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRace\",\"outputs\":[{\"internalType\":\"enum GameV3.CurrentRace\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"currentRaptors\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"raptor\",\"type\":\"uint16\"}],\"name\":\"enterRaptorIntoComp\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"raptor\",\"type\":\"uint16\"}],\"name\":\"enterRaptorIntoDR\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"raptor\",\"type\":\"uint16\"}],\"name\":\"enterRaptorIntoQuickPlay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentQueue\",\"outputs\":[{\"internalType\":\"uint16[8]\",\"name\":\"raptors\",\"type\":\"uint16[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"choice\",\"type\":\"uint8\"}],\"name\":\"raceSelect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"randomness\",\"type\":\"uint256\"}],\"name\":\"rawFulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/game.sol\":\"GameV3\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\n\\nimport \\\"./VRFRequestIDBase.sol\\\";\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator, _link) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash), and have told you the minimum LINK\\n * @dev price for VRF service. Make sure your contract has sufficient LINK, and\\n * @dev call requestRandomness(keyHash, fee, seed), where seed is the input you\\n * @dev want to generate randomness from.\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomness method.\\n *\\n * @dev The randomness argument to fulfillRandomness is the actual random value\\n * @dev generated from your seed.\\n *\\n * @dev The requestId argument is generated from the keyHash and the seed by\\n * @dev makeRequestId(keyHash, seed). If your contract could have concurrent\\n * @dev requests open, you can use the requestId to track which seed is\\n * @dev associated with which randomness. See VRFRequestIDBase.sol for more\\n * @dev details. (See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.)\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ. (Which is critical to making unpredictable randomness! See the\\n * @dev next section.)\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the ultimate input to the VRF is mixed with the block hash of the\\n * @dev block in which the request is made, user-provided seeds have no impact\\n * @dev on its economic security properties. They are only included for API\\n * @dev compatability with previous versions of this contract.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request.\\n */\\nabstract contract VRFConsumerBase is VRFRequestIDBase {\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBase expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomness the VRF output\\n   */\\n  function fulfillRandomness(bytes32 requestId, uint256 randomness) internal virtual;\\n\\n  /**\\n   * @dev In order to keep backwards compatibility we have kept the user\\n   * seed field around. We remove the use of it because given that the blockhash\\n   * enters later, it overrides whatever randomness the used seed provides.\\n   * Given that it adds no security, and can easily lead to misunderstandings,\\n   * we have removed it from usage and can now provide a simpler API.\\n   */\\n  uint256 private constant USER_SEED_PLACEHOLDER = 0;\\n\\n  /**\\n   * @notice requestRandomness initiates a request for VRF output given _seed\\n   *\\n   * @dev The fulfillRandomness method receives the output, once it's provided\\n   * @dev by the Oracle, and verified by the vrfCoordinator.\\n   *\\n   * @dev The _keyHash must already be registered with the VRFCoordinator, and\\n   * @dev the _fee must exceed the fee specified during registration of the\\n   * @dev _keyHash.\\n   *\\n   * @dev The _seed parameter is vestigial, and is kept only for API\\n   * @dev compatibility with older versions. It can't *hurt* to mix in some of\\n   * @dev your own randomness, here, but it's not necessary because the VRF\\n   * @dev oracle will mix the hash of the block containing your request into the\\n   * @dev VRF seed it ultimately uses.\\n   *\\n   * @param _keyHash ID of public key against which randomness is generated\\n   * @param _fee The amount of LINK to send with the request\\n   *\\n   * @return requestId unique ID for this request\\n   *\\n   * @dev The returned requestId can be used to distinguish responses to\\n   * @dev concurrent requests. It is passed as the first argument to\\n   * @dev fulfillRandomness.\\n   */\\n  function requestRandomness(bytes32 _keyHash, uint256 _fee) internal virtual returns (bytes32 requestId) {\\n    LINK.transferAndCall(vrfCoordinator, _fee, abi.encode(_keyHash, USER_SEED_PLACEHOLDER));\\n    // This is the seed passed to VRFCoordinator. The oracle will mix this with\\n    // the hash of the block containing this request to obtain the seed/input\\n    // which is finally passed to the VRF cryptographic machinery.\\n    uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), nonces[_keyHash]);\\n    // nonces[_keyHash] must stay in sync with\\n    // VRFCoordinator.nonces[_keyHash][this], which was incremented by the above\\n    // successful LINK.transferAndCall (in VRFCoordinator.randomnessRequest).\\n    // This provides protection against the user repeating their input seed,\\n    // which would result in a predictable/duplicate output, if multiple such\\n    // requests appeared in the same block.\\n    nonces[_keyHash] = nonces[_keyHash] + 1;\\n    return makeRequestId(_keyHash, vRFSeed);\\n  }\\n\\n  LinkTokenInterface internal immutable LINK;\\n  address private immutable vrfCoordinator;\\n\\n  // Nonces for each VRF key from which randomness has been requested.\\n  //\\n  // Must stay in sync with VRFCoordinator[_keyHash][this]\\n  mapping(bytes32 => uint256) /* keyHash */ /* nonce */\\n    private nonces;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   * @param _link address of LINK token contract\\n   *\\n   * @dev https://docs.chain.link/docs/link-token-contracts\\n   */\\n  constructor(address _vrfCoordinator, address _link) {\\n    vrfCoordinator = _vrfCoordinator;\\n    LINK = LinkTokenInterface(_link);\\n  }\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external virtual {\\n    require(msg.sender == vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\n    fulfillRandomness(requestId, randomness);\\n  }\\n}\\n\",\"keccak256\":\"0x9d7c3191b954986392f4f887e2e83809fb95af4b373a10df0639144789a1903c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFRequestIDBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract VRFRequestIDBase {\\n  /**\\n   * @notice returns the seed which is actually input to the VRF coordinator\\n   *\\n   * @dev To prevent repetition of VRF output due to repetition of the\\n   * @dev user-supplied seed, that seed is combined in a hash with the\\n   * @dev user-specific nonce, and the address of the consuming contract. The\\n   * @dev risk of repetition is mostly mitigated by inclusion of a blockhash in\\n   * @dev the final seed, but the nonce does protect against repetition in\\n   * @dev requests which are included in a single block.\\n   *\\n   * @param _userSeed VRF seed input provided by user\\n   * @param _requester Address of the requesting contract\\n   * @param _nonce User-specific nonce at the time of the request\\n   */\\n  function makeVRFInputSeed(\\n    bytes32 _keyHash,\\n    uint256 _userSeed,\\n    address _requester,\\n    uint256 _nonce\\n  ) internal pure virtual returns (uint256) {\\n    return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\n  }\\n\\n  /**\\n   * @notice Returns the id for this request\\n   * @param _keyHash The serviceAgreement ID to be used for this request\\n   * @param _vRFInputSeed The seed to be passed directly to the VRF\\n   * @return The id for this request\\n   *\\n   * @dev Note that _vRFInputSeed is not the seed passed by the consuming\\n   * @dev contract, but the one generated by makeVRFInputSeed\\n   */\\n  function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure virtual returns (bytes32) {\\n    return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\n  }\\n}\\n\",\"keccak256\":\"0xe7c93aed7a36c4737af24f8af1e622c6051dcc03c9a6fd82b98b8ce22bd6ae89\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/game.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"./interfaces/IGame.sol\\\";\\r\\nimport \\\"./interfaces/IMinter.sol\\\";\\r\\n\\r\\nimport \\\"./libraries/gameLib.sol\\\";\\r\\n\\r\\nimport \\\"./structs/stats.sol\\\";\\r\\nimport \\\"./structs/gameVars.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBase.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\r\\n\\r\\ncontract GameV3 is IERC721Receiver, Context, VRFConsumerBase{\\r\\n\\r\\n    event NewAdmin(address admin);\\r\\n    event UpdatedStats(uint16 raptor, Stats stats);\\r\\n\\r\\n    event RaceChosen(string raceType);\\r\\n    event QPRandomRequested();\\r\\n    event CompRandomRequested();\\r\\n    event DRRandomRequested();\\r\\n\\r\\n    event InjuredRaptor(uint16 raptor);\\r\\n    event FightWinner(uint16 raptor);\\r\\n    event Fighters(uint16[2] fighters);\\r\\n    event Top3(uint16[3] places);\\r\\n\\r\\n    event QuickPlayRaceStarted(uint16[8] raptors);\\r\\n    event QuickPlayRaceWinner(uint16 raptor);\\r\\n\\r\\n    event CompetitiveRaceStarted(uint16[8] raptors);\\r\\n    event CompetitiveRaceWinner(uint16 raptor);\\r\\n\\r\\n    event DeathRaceStarted(uint16[8] raptors);\\r\\n    event DeathRaceWinner(uint16 raptor);\\r\\n    event RipRaptor(uint16 raptor);\\r\\n\\r\\n    address private admin;\\r\\n\\r\\n    uint16[8] public currentRaptors;\\r\\n\\r\\n    uint256 public pot;\\r\\n\\r\\n    uint256 public QPFee;\\r\\n    uint256 public CompFee;\\r\\n    uint256 public DRFee;\\r\\n\\r\\n    uint256 private constant USER_SEED_PLACEHOLDER = 0;\\r\\n\\r\\n    uint64[] private primes = [\\r\\n        6619,\\r\\n        6719,\\r\\n        7309,\\r\\n        7393,\\r\\n        7853,\\r\\n        7919,\\r\\n        7727,\\r\\n        3167\\r\\n    ];\\r\\n    \\r\\n    struct VRF {\\r\\n        address vrfCoordinator;\\r\\n        address linkToken;\\r\\n        bytes32 keyHash;\\r\\n        uint256 fee;\\r\\n        LinkTokenInterface LINK;\\r\\n        uint256 randomResult;\\r\\n        mapping(bytes32 => uint256) /* keyHash */ /* nonce */ nonces;\\r\\n        bytes32 lastRequestId;\\r\\n    }\\r\\n\\r\\n    VRF private vrf;\\r\\n\\r\\n    enum CurrentRace {\\r\\n        StandBy,\\r\\n        QuickPlay,\\r\\n        Competitive,\\r\\n        DeathRace\\r\\n    }\\r\\n\\r\\n    string[] raceNames =[\\r\\n        \\\"StandBy\\\",\\r\\n        \\\"QuickPlay\\\",\\r\\n        \\\"Competitive\\\",\\r\\n        \\\"DeathRace\\\"\\r\\n    ];\\r\\n\\r\\n    CurrentRace public currentRace;\\r\\n    GameVars private currentVars;\\r\\n\\r\\n    address payable private communityWallet;\\r\\n    uint16 private currentPosition;\\r\\n    uint32 private distance;\\r\\n\\r\\n    constructor(\\r\\n        address _minterContract,\\r\\n        address _communityWallet,\\r\\n        uint256 _Fee,\\r\\n        address _vrfCoordinator,\\r\\n        address _linkToken,\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _OracleFee,\\r\\n        uint32 _distance\\r\\n    ) VRFConsumerBase( _vrfCoordinator, _linkToken){\\r\\n        gameLib.setDistance(_distance);\\r\\n        vrf.LINK = LinkTokenInterface(_linkToken);\\r\\n        vrf.vrfCoordinator = _vrfCoordinator;\\r\\n        vrf.linkToken = _linkToken;\\r\\n        vrf.keyHash = _keyHash;\\r\\n        vrf.fee = _OracleFee;\\r\\n        gameLib.setMinter(_minterContract);\\r\\n        admin = _msgSender();\\r\\n        communityWallet = payable(_communityWallet);\\r\\n        pot =0;\\r\\n        QPFee = _Fee;\\r\\n        CompFee = _Fee * 5;\\r\\n        DRFee = _Fee * 25;\\r\\n        currentPosition = 0;\\r\\n    }    \\r\\n\\r\\n    modifier onlyAdmin {\\r\\n        require(msg.sender == admin, \\\"You can not call this function\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function buildVars(uint16[8] memory raptors, uint16[8] memory expandedNums, bool dr) internal returns (GameVars memory gameVars){\\r\\n        currentVars.raptors = raptors;\\r\\n        currentVars.expandedNums = expandedNums;\\r\\n        currentVars.dr = dr;\\r\\n        gameVars = currentVars;\\r\\n    }\\r\\n\\r\\n    //Select Race\\r\\n    function raceSelect(uint8 choice)public onlyAdmin{\\r\\n        require(choice >= 0 && choice <=3);\\r\\n        currentRace = CurrentRace(choice);\\r\\n        emit RaceChosen(raceNames[choice]);\\r\\n    }\\r\\n\\r\\n    function _payOut(uint16 winner, uint payout,uint communityPayout) internal {\\r\\n        payable(gameLib.getOwner(winner)).transfer(payout);\\r\\n        communityWallet.transfer(communityPayout);\\r\\n        pot =0;\\r\\n    }\\r\\n    \\r\\n    function getCurrentQueue() public view returns(uint16[8] memory raptors){\\r\\n        return currentRaptors;\\r\\n    }\\r\\n\\r\\n    //Quickplay Entry\\r\\n    function enterRaptorIntoQuickPlay(uint16 raptor) public payable {\\r\\n        //check that current race is enabled\\r\\n        require(uint(currentRace) == 1, \\\"This race queue is not available at the moment\\\");\\r\\n\\r\\n\\r\\n        //check if there are spaces left\\r\\n        require(currentRaptors[7] ==0, \\\"You can not join at this time\\\");\\r\\n\\r\\n        //check the raptor is owned by _msgSender()\\r\\n        require(gameLib.owns(raptor), \\\"You do not own this raptor\\\");\\r\\n\\r\\n        //check that raptor is not on cooldown\\r\\n        require(gameLib.getTime(raptor) < block.timestamp, \\\"Your raptor is not available right now\\\");\\r\\n\\r\\n        //check that msg.value is the entrance fee\\r\\n        require(msg.value == QPFee, \\\"You have not sent enough funds\\\");\\r\\n\\r\\n        //add msg.value to pot\\r\\n        pot += msg.value;\\r\\n\\r\\n        //add raptor to the queue\\r\\n        currentRaptors[currentPosition] = raptor;\\r\\n\\r\\n        //increment current Position\\r\\n        currentPosition += 1;\\r\\n\\r\\n        //if 8 entrants then start race\\r\\n        if(currentPosition ==8){\\r\\n            getRandomNumber();\\r\\n            emit QPRandomRequested();\\r\\n        } \\r\\n    }\\r\\n\\r\\n    //Competitive Entry\\r\\n    function enterRaptorIntoComp(uint16 raptor) public payable {\\r\\n        //check that current race is enabled\\r\\n        require(uint(currentRace) == 2, \\\"This race queue is not available at the moment\\\");\\r\\n\\r\\n        //check if there are spaces left\\r\\n        require(currentRaptors[7] ==0, \\\"You can not join at this time\\\");\\r\\n\\r\\n        //check that raptor is not on cooldown\\r\\n        require(gameLib.getTime(raptor) < block.timestamp, \\\"Your raptor is not available right now\\\");\\r\\n\\r\\n        //check the raptor is owned by _msgSender()\\r\\n        require(gameLib.owns(raptor), \\\"You do not own this raptor\\\");\\r\\n\\r\\n        //check that msg.value is the entrance fee\\r\\n        require(msg.value == CompFee, \\\"You have not sent enough funds\\\");\\r\\n\\r\\n        //add msg.value to pot\\r\\n        pot += msg.value;\\r\\n\\r\\n        //add raptor to the queue\\r\\n        currentRaptors[currentPosition] = raptor;\\r\\n\\r\\n        //increment current Position\\r\\n        currentPosition += 1;\\r\\n\\r\\n        //if 8 entrants then start race\\r\\n        if(currentPosition == 8){\\r\\n            getRandomNumber();\\r\\n            emit CompRandomRequested();\\r\\n        } \\r\\n    }\\r\\n\\r\\n    //DeathRace Entry\\r\\n    function enterRaptorIntoDR(uint16 raptor) public payable {\\r\\n        //check that current race is enabled\\r\\n        require(uint(currentRace) == 3, \\\"This race queue is not available at the moment\\\");\\r\\n\\r\\n        //check if there are spaces left\\r\\n        require(currentRaptors[7] ==0, \\\"You can not join at this time\\\");\\r\\n\\r\\n        //check that raptor is not on cooldown\\r\\n        require(gameLib.getTime(raptor) < block.timestamp, \\\"Your raptor is not available right now\\\");\\r\\n\\r\\n        //check the raptor is owned by _msgSender()\\r\\n        require(gameLib.owns(raptor), \\\"You do not own this raptor\\\");\\r\\n\\r\\n        // gameLib._approve(raptor);\\r\\n\\r\\n        //check that msg.value is the entrance fee\\r\\n        require(msg.value == DRFee, \\\"You have not sent enough funds\\\");\\r\\n\\r\\n        //add msg.value to pot\\r\\n        pot += msg.value;\\r\\n\\r\\n        //add raptor to the queue\\r\\n        currentRaptors[currentPosition] = raptor;\\r\\n\\r\\n        //increment current Position\\r\\n        currentPosition += 1;\\r\\n\\r\\n        //if 8 entrants then start race\\r\\n        if(currentPosition == 8){\\r\\n            getRandomNumber();\\r\\n            emit DRRandomRequested();\\r\\n        }  \\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address operator, \\r\\n        address from, \\r\\n        uint256 tokenId, \\r\\n        bytes calldata data) external pure override returns (bytes4) {\\r\\n        revert();\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    //------------------------------------Oracle functions--------------------------------------------//\\r\\n\\r\\n    // Requests Randomness\\r\\n    function getRandomNumber() internal  {\\r\\n        require(vrf.LINK.balanceOf(address(this)) >= vrf.fee, \\\"Not enough LINK balance\\\");\\r\\n        bytes32 requestId = requestRandomness(vrf.keyHash, vrf.fee);\\r\\n        vrf.lastRequestId = requestId;\\r\\n    }\\r\\n    \\r\\n    //------------------------------------------Helper Function----------------------------------------------\\r\\n   \\r\\n    //generate n random values from random value\\r\\n    function expand(uint256 _rnd) internal view returns(uint16[8] memory){\\r\\n        uint16[8] memory expandedValues;\\r\\n        for(uint8 i = 0; i<8 ; i++){\\r\\n            expandedValues[i] = uint16(uint256(keccak256(abi.encode(_rnd,i))) % primes[i]);\\r\\n        }\\r\\n        return expandedValues;\\r\\n    }\\r\\n    //------------------------------------------Helper Function----------------------------------------------\\r\\n\\r\\n    //-----------------------------------------Do Not Use These Functions In Your Contract----------------------\\r\\n    //first function used in callback from VRF\\r\\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external override{\\r\\n        require(msg.sender == vrf.vrfCoordinator, \\\"Only VRFCoordinator can fulfill\\\");\\r\\n        fulfillRandomness(requestId, randomness);\\r\\n    }\\r\\n\\r\\n    //callback function used by VRF Coordinator\\r\\n    function fulfillRandomness(bytes32 requestId, uint256 randomness) internal override {\\r\\n        require(requestId == vrf.lastRequestId, \\\"Err: WRID\\\");\\r\\n        vrf.randomResult = randomness;\\r\\n        uint16[8] memory expandedNums;\\r\\n        uint16 winner;\\r\\n        expandedNums = expand(vrf.randomResult);\\r\\n        if(uint(currentRace) == 1){\\r\\n            winner = gameLib._quickPlayStart(buildVars(currentRaptors,expandedNums,false));\\r\\n            currentPosition = 0;\\r\\n            _payOut(winner, gameLib.calcPrize(pot), gameLib.calcFee(pot));\\r\\n            delete currentRace;\\r\\n            delete currentRaptors;\\r\\n            delete currentVars;\\r\\n        }\\r\\n        else if(uint(currentRace) == 2){\\r\\n            winner = gameLib._compStart(buildVars(currentRaptors,expandedNums,false));\\r\\n            currentPosition = 0;\\r\\n            _payOut(winner, gameLib.calcPrize(pot), gameLib.calcFee(pot));            \\r\\n            delete currentRace;\\r\\n            delete currentRaptors;\\r\\n            delete currentVars;\\r\\n        }\\r\\n        else if(uint(currentRace) == 3){\\r\\n            winner = gameLib._deathRaceStart(buildVars(currentRaptors,expandedNums,true));\\r\\n            currentPosition = 0;\\r\\n            _payOut(winner, gameLib.calcPrize(pot), gameLib.calcFee(pot));\\r\\n            delete currentRace;\\r\\n            delete currentRaptors;\\r\\n            delete currentVars;\\r\\n            // gameLib.removeApproval();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //called in request randomness\\r\\n    function makeVRFInputSeed(\\r\\n        bytes32 _keyHash,\\r\\n        uint256 _userSeed,\\r\\n        address _requester,\\r\\n        uint256 _nonce\\r\\n    ) internal pure override returns (uint256) {\\r\\n        return uint256(keccak256(abi.encode(_keyHash, _userSeed, _requester, _nonce)));\\r\\n    }\\r\\n\\r\\n    //called in requestRandomness\\r\\n    function makeRequestId(bytes32 _keyHash, uint256 _vRFInputSeed) internal pure override returns(bytes32){\\r\\n        return keccak256(abi.encodePacked(_keyHash, _vRFInputSeed));\\r\\n    }\\r\\n\\r\\n    //make oracle request\\r\\n    function requestRandomness(bytes32 _keyHash, uint256 _fee) internal override returns(bytes32 requestId) {\\r\\n        vrf.LINK.transferAndCall(vrf.vrfCoordinator, _fee,abi.encode(_keyHash, USER_SEED_PLACEHOLDER));        \\r\\n        uint256 vRFSeed = makeVRFInputSeed(_keyHash, USER_SEED_PLACEHOLDER, address(this), vrf.nonces[_keyHash]);\\r\\n        vrf.nonces[_keyHash] = vrf.nonces[_keyHash] +1;\\r\\n        requestId = makeRequestId(_keyHash, vRFSeed);\\r\\n    }\\r\\n    //-----------------------------------------Do Not Use These Functions In Your Contract----------------------\\r\\n\\r\\n\\r\\n\\r\\n    function withdrawLink() public onlyAdmin {\\r\\n        vrf.LINK.transfer(msg.sender, vrf.LINK.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n}\",\"keccak256\":\"0x8bc47fcba625656b3cda4c0761c7594535c549adde55ec793233619a75656a64\",\"license\":\"MIT\"},\"contracts/interfaces/IGame.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\ninterface IGame {\\r\\n    function raceSelect(uint8 choice) external;\\r\\n\\r\\n    //Quickplay Entry\\r\\n    function enterRaptorIntoQuickPlay(uint16 raptor) external payable returns (bool);\\r\\n\\r\\n    //Competitive Entry\\r\\n    function enterRaptorIntoComp(uint16 raptor) external payable returns (bool);\\r\\n\\r\\n    //DeathRace Entry\\r\\n    function enterRaptorIntoDR(uint16 raptor) external payable returns(bool);\\r\\n}\",\"keccak256\":\"0x091ae5d512adc42c7eb4570884ea73c2083666a35acbce9befd3dff00b01e616\",\"license\":\"MIT\"},\"contracts/interfaces/IMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"../structs/stats.sol\\\";\\r\\n\\r\\ninterface IMinter {\\r\\n\\r\\n    function getPrice(uint8 _amount) external view returns(uint256 givenPrice);\\r\\n\\r\\n    function burn(uint256 tokenId) external;\\r\\n\\r\\n    function tokenURI(uint16 _tokenId) external view returns(string memory uri);\\r\\n\\r\\n    function walletOfOwner(address _wallet) external view returns(uint16[] memory ids);\\r\\n\\r\\n    function isFoundingRaptor(uint16 raptor) external view returns(bool);\\r\\n \\r\\n    function getSpeed(uint16 _raptor) external view returns(uint16);\\r\\n\\r\\n    function getStrength(uint16 _raptor) external view returns(uint16);\\r\\n\\r\\n    function getCoolDown(uint16 _raptor) external view returns(uint32 time);\\r\\n\\r\\n    function upgradeSpeed(uint16 _raptor, uint8 _amount) external returns(bool);\\r\\n\\r\\n    function upgradeStrength(uint16 _raptor, uint8 _amount) external returns(bool);\\r\\n\\r\\n    function upgradeAgressiveness(uint16 _raptor, uint8 _amount) external returns(bool);\\r\\n\\r\\n    function upgradefightsWon(uint16 _raptor) external returns(bool);\\r\\n\\r\\n    function upgradeQPWins(uint16 _raptor) external returns(bool);\\r\\n\\r\\n    function upgradeCompWins(uint16 _raptor) external returns(bool);\\r\\n\\r\\n    function upgradeDRWins(uint16 _raptor) external returns(bool);\\r\\n\\r\\n    function upgradeTop3Finishes(uint16 _raptor) external returns(bool);\\r\\n\\r\\n    function increaseCooldownTime(uint16 _raptor, uint32 newTime) external returns(bool);\\r\\n\\r\\n\\r\\n    \\r\\n\\r\\n}\",\"keccak256\":\"0xc5579f2aef3463a8ba78b31f88e18ed1b063503872abe19b24deaee51289c789\",\"license\":\"MIT\"},\"contracts/libraries/gameLib.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n\\r\\nimport \\\"../structs/stats.sol\\\";\\r\\nimport \\\"../structs/gameVars.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IMinter.sol\\\";\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\n\\r\\nlibrary gameLib {\\r\\n    //-------------------------Events-------------------------------//\\r\\n    event InjuredRaptor(uint16 raptor);\\r\\n    event FightWinner(uint16 raptor);\\r\\n    event Fighters(uint16[2] fighters);\\r\\n    event Top3(uint16[3] places);\\r\\n\\r\\n    event QuickPlayRaceStarted(uint16[8] raptors);\\r\\n    event QuickPlayRaceWinner(uint16 raptor);\\r\\n\\r\\n    event CompetitiveRaceStarted(uint16[8] raptors);\\r\\n    event CompetitiveRaceWinner(uint16 raptor);\\r\\n\\r\\n    event DeathRaceStarted(uint16[8] raptors);\\r\\n    event DeathRaceWinner(uint16 raptor);\\r\\n    event RipRaptor(uint16 raptor);\\r\\n\\r\\n    \\r\\n    //-------------------------Events-------------------------------//\\r\\n    \\r\\n    //-------------------------storage----------------------------------//\\r\\n    //-------------------------minter----------------------------------//\\r\\n    bytes32 constant minterSlot = keccak256(\\\"minterAddress\\\");\\r\\n\\r\\n    struct MinterStore{\\r\\n        address minterContract;\\r\\n    }\\r\\n\\r\\n    function minterStore() internal pure returns(MinterStore storage minter){\\r\\n        bytes32 slot = minterSlot;\\r\\n        assembly{\\r\\n            minter.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setMinter(address _minter) internal {\\r\\n        MinterStore storage store = minterStore();\\r\\n        store.minterContract = _minter;\\r\\n    }\\r\\n    //-------------------------minter----------------------------------//\\r\\n    //-------------------------distance----------------------------------//\\r\\n    bytes32 constant distanceSlot = keccak256(\\\"distance\\\");\\r\\n\\r\\n    struct DistanceStore{\\r\\n        uint32 distance;\\r\\n    }\\r\\n\\r\\n    function distanceStore() internal pure returns(DistanceStore storage distance){\\r\\n        bytes32 slot = distanceSlot;\\r\\n        assembly{\\r\\n            distance.slot := slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setDistance(uint32 _distance) internal {\\r\\n        DistanceStore storage store = distanceStore();\\r\\n        store.distance = _distance;\\r\\n    }\\r\\n    //-------------------------distance----------------------------------//\\r\\n    //-------------------------storage----------------------------------//\\r\\n\\r\\n    //-------------------------Helpers-------------------------------//\\r\\n\\r\\n    function getTime(uint16 _raptor) internal view returns (uint32){\\r\\n        MinterStore storage store = minterStore();\\r\\n        return IMinter(store.minterContract).getCoolDown(_raptor);\\r\\n    }\\r\\n\\r\\n    //Check if msg.sender owns token\\r\\n    function owns(uint16 raptor) internal view returns(bool){\\r\\n        MinterStore storage store = minterStore();\\r\\n        return (IERC721(store.minterContract).ownerOf(raptor) == msg.sender) ? true : false;\\r\\n    }\\r\\n\\r\\n    function getOwner(uint16 raptor) internal view returns(address){\\r\\n        MinterStore storage store = minterStore();\\r\\n        return IERC721(store.minterContract).ownerOf(uint256(raptor));\\r\\n    }\\r\\n\\r\\n    function checkIfFounder(uint16 raptor) internal view returns(bool){\\r\\n        MinterStore storage store = minterStore();\\r\\n        return IMinter(store.minterContract).isFoundingRaptor(raptor);\\r\\n    }\\r\\n\\r\\n    function calcFee(uint pool) internal pure returns(uint fee){\\r\\n        fee = (pool / 100) * 5;\\r\\n    }\\r\\n\\r\\n    function calcPrize(uint pool) internal pure returns (uint prize){\\r\\n        prize = (pool / 100) * 95;\\r\\n    }\\r\\n\\r\\n    function checkBounds(uint8 input) internal pure returns(bool response){\\r\\n        (input < 8 && input >= 0) ? response = true : response = false;\\r\\n    }\\r\\n\\r\\n    // function _approve(uint16 raptor) internal {\\r\\n    //     MinterStore storage store = minterStore();\\r\\n    //     IERC721(store.minterContract).approve(address(this),raptor);\\r\\n    // }\\r\\n\\r\\n    // function removeApproval() internal {\\r\\n    //     MinterStore storage store = minterStore();\\r\\n    //     IERC721(store.minterContract).setApprovalForAll(address(this), false);\\r\\n    // }\\r\\n\\r\\n    function getFighters(GameVars memory gameVars) internal returns(GameVars memory){\\r\\n        \\r\\n        gameVars.fighters[0] = uint8(gameVars.expandedNums[0] % 8);\\r\\n        gameVars.fighters[1] = uint8(gameVars.expandedNums[3] % 8);\\r\\n\\r\\n        while(gameVars.fighters[0] == gameVars.fighters[1]){\\r\\n            bool check = checkBounds(gameVars.fighters[0]);\\r\\n            if(!check) {\\r\\n                gameVars.fighters[0] =0 + uint8(gameVars.expandedNums[3] % 7);\\r\\n            } \\r\\n        }\\r\\n\\r\\n        emit Fighters([gameVars.raptors[gameVars.fighters[0]],gameVars.raptors[gameVars.fighters[1]]]);\\r\\n\\r\\n        return gameVars;\\r\\n\\r\\n    }\\r\\n\\r\\n    //agressiveness & strength not currently factors on who wins the fight\\r\\n    function getFightWinner(GameVars memory gameVars) internal returns(GameVars memory){\\r\\n        uint8 index;\\r\\n        (gameVars.expandedNums[4]%2 == 0) ? index = gameVars.fighters[0] : index = gameVars.fighters[1]; \\r\\n\\r\\n        if(index == gameVars.fighters[0]){\\r\\n            emit FightWinner(gameVars.raptors[gameVars.fighters[0]]);\\r\\n            gameVars.fightWinner = gameVars.fighters[0];\\r\\n            if(!gameVars.dr){\\r\\n                emit InjuredRaptor(gameVars.raptors[gameVars.fighters[1]]);\\r\\n                addCooldownPeriod(gameVars);\\r\\n            } else{\\r\\n                _kill(gameVars.raptors[gameVars.fighters[1]]);\\r\\n                emit RipRaptor(gameVars.raptors[gameVars.fighters[1]]);\\r\\n            }\\r\\n        }else{\\r\\n            gameVars.fightWinner = gameVars.fighters[1];\\r\\n            emit FightWinner(gameVars.raptors[gameVars.fighters[1]]);\\r\\n            if(!gameVars.dr){\\r\\n                addCooldownPeriod(gameVars);\\r\\n                emit InjuredRaptor(gameVars.raptors[gameVars.fighters[0]]);\\r\\n            } else{\\r\\n                _kill(gameVars.raptors[gameVars.fighters[0]]);\\r\\n                emit RipRaptor(gameVars.raptors[gameVars.fighters[0]]);\\r\\n            }\\r\\n        }\\r\\n        return gameVars;\\r\\n    }\\r\\n\\r\\n    function getFastest(uint8[2] memory fighters,uint32[8] memory time) internal pure returns (uint8[3] memory){\\r\\n        uint16 lowest=20000;\\r\\n        uint8[3] memory places;\\r\\n        uint8 i = 0;\\r\\n        for(; i< 8; i++){\\r\\n            if(i != fighters[0] && i != fighters[1]){\\r\\n                if(time[i]<lowest){\\r\\n                    lowest = uint16(time[i]); \\r\\n                    places[0] = i;           \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        lowest = 20000;\\r\\n        i = 0;\\r\\n        for(; i< 8; i++){\\r\\n            if(i != fighters[0] && i != fighters[1] && i != places[0]){\\r\\n                if(time[i]<lowest){\\r\\n                    lowest = uint16(time[i]); \\r\\n                    places[1] = i;           \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        lowest = 20000;\\r\\n        i = 0;\\r\\n        for(; i< 8; i++){\\r\\n            if(i != fighters[0] && i != fighters[1] && i != places[0] && i != places[2]){\\r\\n                if(time[i]<lowest){\\r\\n                    lowest = uint16(time[i]); \\r\\n                    places[2] = i;            \\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return places;\\r\\n    }\\r\\n\\r\\n    function getWinner(GameVars memory gameVars) internal view returns(GameVars memory){\\r\\n        require(gameVars.expandedNums.length == 8, \\\"IRNL\\\");\\r\\n        uint8 i = 0;\\r\\n        uint16[8] memory speed;\\r\\n        address minter = minterStore().minterContract;\\r\\n        //get stats for each raptor\\r\\n        for (; i<8;i++){\\r\\n            speed[i] = IMinter(minter).getSpeed(gameVars.raptors[i]);\\r\\n        }\\r\\n\\r\\n        //get randomness for each raptor\\r\\n        //calc times to finish the race first with added randomness\\r\\n        i =0;\\r\\n        uint8[8] memory randomness;\\r\\n        uint32[8] memory time;\\r\\n        uint32 distance = distanceStore().distance;\\r\\n        for(; i< 8; i++){\\r\\n            randomness[i] = uint8(gameVars.expandedNums[i] % 5);\\r\\n            time[i] = distance / (speed[i] + randomness[i]);\\r\\n        }      \\r\\n        \\r\\n        //gets fastest indexes & ignores fighter indexes\\r\\n        gameVars.places = getFastest(gameVars.fighters, time);\\r\\n        return gameVars;\\r\\n    }\\r\\n\\r\\n    //-------------------------Helpers--------------------------------//\\r\\n\\r\\n    //------------------------Stat-Changes------------------------------//\\r\\n                       // -------  +vary ----------//\\r\\n\\r\\n    function upgradeStrength(GameVars memory gameVars) internal {\\r\\n        uint8 rand = uint8(gameVars.expandedNums[4] %3) +1;\\r\\n        address minter = minterStore().minterContract;\\r\\n        uint8 index;\\r\\n        (gameVars.fightWinner == gameVars.fighters[0]) ? (index = 0) : (index = 1);\\r\\n        bool success = IMinter(minter).upgradeStrength(gameVars.raptors[index], rand);\\r\\n        require(success, \\\"USt\\\");\\r\\n    }\\r\\n\\r\\n    function upgradeSpeed(GameVars memory gameVars) internal {\\r\\n        uint8 rand = uint8(gameVars.expandedNums[7] %3) +1;\\r\\n        address minter = minterStore().minterContract;\\r\\n        bool success = IMinter(minter).upgradeSpeed(gameVars.raptors[gameVars.places[0]],rand);\\r\\n        require(success, \\\"USp\\\");\\r\\n    }\\r\\n                       // -------  +Vary ----------//\\r\\n\\r\\n                       // -------  +1 ----------//\\r\\n    function increaseQPWins(GameVars memory gameVars) internal {\\r\\n        address minter = minterStore().minterContract;\\r\\n        bool success = IMinter(minter).upgradeQPWins(gameVars.raptors[gameVars.places[0]]);\\r\\n        require(success, \\\"QW\\\");\\r\\n    }\\r\\n\\r\\n    function increaseCompWins(GameVars memory gameVars) internal {\\r\\n        address minter = minterStore().minterContract;\\r\\n        bool success = IMinter(minter).upgradeCompWins(gameVars.raptors[gameVars.places[0]]);\\r\\n        require(success, \\\"CW\\\");\\r\\n    }\\r\\n\\r\\n    function increaseDeathRaceWins(GameVars memory gameVars) internal {\\r\\n        address minter = minterStore().minterContract;\\r\\n        bool success = IMinter(minter).upgradeDRWins(gameVars.raptors[gameVars.places[0]]);\\r\\n        require(success, \\\"DW\\\");\\r\\n    }\\r\\n\\r\\n    function increaseTop3RaceFinishes(GameVars memory gameVars) internal {\\r\\n        address minter = minterStore().minterContract;\\r\\n        for(uint i = 0; i < 3; i++){\\r\\n            bool success = IMinter(minter).upgradeTop3Finishes(gameVars.raptors[gameVars.places[i]]);\\r\\n            require(success, \\\"T3\\\");\\r\\n        }\\r\\n    }\\r\\n                       // -------  +1 ----------//\\r\\n\\r\\n         // -----  +12 Hours/ Unless Founding Raptor 6 Hours -----//\\r\\n    \\r\\n    function addCooldownPeriod(GameVars memory gameVars) internal {\\r\\n        address minter = minterStore().minterContract;\\r\\n        uint8 index;\\r\\n        (gameVars.fightWinner == gameVars.fighters[0]) ? (index = 1) : (index = 0);\\r\\n        bool check = checkIfFounder(gameVars.raptors[index]);\\r\\n        uint32 newTime;\\r\\n        (check) ? (newTime = 6 hours) : (newTime = 12 hours);\\r\\n        bool success = IMinter(minter).increaseCooldownTime(gameVars.raptors[gameVars.fighters[index]], newTime);\\r\\n        require(success, \\\"CD\\\");\\r\\n    }\\r\\n         // -----  +12 Hours/ Unless Founding Raptor 6 Hours -----//\\r\\n    //------------------------Stat-Changes---------------------------------//\\r\\n\\r\\n    //-----------------------------QP--------------------------------------//\\r\\n\\r\\n    //QP Start\\r\\n    function _quickPlayStart(GameVars memory gameVars) internal returns (uint16){\\r\\n        require(gameVars.expandedNums.length == 8,\\\"Err: IRL\\\");\\r\\n        emit QuickPlayRaceStarted(gameVars.raptors);\\r\\n        \\r\\n        //gets fighters, finds the winner & adds them to indexes to ignore for choosing winner\\r\\n        gameVars = getFighters(gameVars);\\r\\n        gameVars = getFightWinner(gameVars);\\r\\n        //gets the winner & next two places\\r\\n        gameVars = getWinner(gameVars);\\r\\n        \\r\\n        emit Top3([gameVars.raptors[gameVars.places[0]],gameVars.raptors[gameVars.places[1]],gameVars.raptors[gameVars.places[2]]]);\\r\\n        \\r\\n        handleQPStats(gameVars);\\r\\n\\r\\n\\r\\n        emit QuickPlayRaceWinner(gameVars.raptors[gameVars.places[0]]);\\r\\n\\r\\n        return gameVars.raptors[gameVars.places[0]];\\r\\n\\r\\n    }\\r\\n\\r\\n    function handleQPStats(GameVars memory gameVars) internal {\\r\\n        increaseQPWins(gameVars);\\r\\n        upgradeSpeed(gameVars);\\r\\n        increaseTop3RaceFinishes(gameVars);\\r\\n        upgradeStrength(gameVars);\\r\\n    }\\r\\n\\r\\n    //---------------------------QP--------------------------------------//\\r\\n    //----------------------------Comp-----------------------------------//\\r\\n\\r\\n    // //Comp Start\\r\\n    function _compStart(GameVars memory gameVars) internal returns(uint16){\\r\\n        require(gameVars.expandedNums.length == 8);\\r\\n        emit CompetitiveRaceStarted(gameVars.raptors);\\r\\n\\r\\n        //gets fighters, finds the winner & adds them to indexes to ignore for choosing winner\\r\\n        gameVars = getFighters(gameVars);\\r\\n        gameVars = getFightWinner(gameVars);\\r\\n        //gets the winner & next two places\\r\\n        gameVars = getWinner(gameVars);\\r\\n        emit Top3([gameVars.raptors[gameVars.places[0]],gameVars.raptors[gameVars.places[1]],gameVars.raptors[gameVars.places[2]]]);\\r\\n        \\r\\n        //modify states //index 0 = winner; index 1 = second; index 2 = third\\r\\n        \\r\\n        handleCompStats(gameVars);       \\r\\n\\r\\n\\r\\n        emit CompetitiveRaceWinner(gameVars.raptors[gameVars.places[0]]);\\r\\n\\r\\n        return gameVars.raptors[gameVars.places[0]];\\r\\n\\r\\n    }\\r\\n\\r\\n    function handleCompStats(GameVars memory gameVars) internal {\\r\\n        increaseCompWins(gameVars);\\r\\n        upgradeSpeed(gameVars);\\r\\n        increaseTop3RaceFinishes(gameVars);\\r\\n        upgradeStrength(gameVars);\\r\\n    }\\r\\n\\r\\n    // //---------------------------------Comp--------------------------------//\\r\\n    // //-------------------------------DR------------------------------------//\\r\\n\\r\\n    // //DR Start\\r\\n    function _deathRaceStart(GameVars memory gameVars) internal returns(uint16){\\r\\n        require(gameVars.expandedNums.length == 8);\\r\\n        emit DeathRaceStarted(gameVars.raptors);\\r\\n\\r\\n        //gets fighters, finds the winner & adds them to indexes to ignore for choosing winner\\r\\n        gameVars = getFighters(gameVars);\\r\\n        gameVars = getFightWinner(gameVars);\\r\\n        //gets the winner & next two places\\r\\n        gameVars = getWinner(gameVars);\\r\\n        emit Top3([gameVars.raptors[gameVars.places[0]],gameVars.raptors[gameVars.places[1]],gameVars.raptors[gameVars.places[2]]]);\\r\\n        \\r\\n        handleDRStats(gameVars);\\r\\n\\r\\n        emit DeathRaceWinner(gameVars.raptors[gameVars.places[0]]);\\r\\n\\r\\n        return gameVars.raptors[gameVars.places[0]];\\r\\n    }\\r\\n\\r\\n    // //DR Kill/BURN RAPTOR\\r\\n    function _kill(uint16 raptor) internal {\\r\\n        MinterStore storage store = minterStore();\\r\\n        IMinter(store.minterContract).burn(uint256(raptor));\\r\\n    }\\r\\n\\r\\n    function handleDRStats(GameVars memory gameVars) internal {\\r\\n        increaseCompWins(gameVars);\\r\\n        upgradeSpeed(gameVars);\\r\\n        increaseTop3RaceFinishes(gameVars);\\r\\n        upgradeStrength(gameVars);\\r\\n    }\\r\\n\\r\\n    // //---------------------------------------DR----------------------------//\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x64dc725072992cda0a7648168d2c2df9a70b8349ccdd35881fe8fdb1e58a348c\",\"license\":\"MIT\"},\"contracts/structs/gameVars.sol\":{\"content\":\"pragma solidity ^0.8.7;\\r\\n\\r\\nstruct GameVars {\\r\\n    uint16[8] raptors;\\r\\n    uint16[8] expandedNums;\\r\\n    uint8[2] fighters;\\r\\n    uint8 fightWinner;\\r\\n    uint8[3] places;\\r\\n    bool dr;\\r\\n}\",\"keccak256\":\"0xb668492766a6e2b8bd9d83c4f13061374c35b66a1356a9dc4c292865a9f60ce3\"},\"contracts/structs/stats.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\n\\r\\nstruct Stats{\\r\\n    uint16 speed;\\r\\n    uint16 strength;\\r\\n    uint16 fightsWon;\\r\\n    uint16 quickPlayRacesWon;\\r\\n    uint16 compRacesWon;\\r\\n    uint16 deathRacesWon;\\r\\n    uint16 totalRacesTop3Finish;\\r\\n    uint32 cooldownTime;\\r\\n}\",\"keccak256\":\"0xf38b9fc70fed15eb731e6333ca150df4da76eec64e0c5cd99a46833df9cd2f52\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 79,
        "contract": "contracts/game.sol:GameV3",
        "label": "nonces",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 2312,
        "contract": "contracts/game.sol:GameV3",
        "label": "admin",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 2316,
        "contract": "contracts/game.sol:GameV3",
        "label": "currentRaptors",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint16)8_storage"
      },
      {
        "astId": 2318,
        "contract": "contracts/game.sol:GameV3",
        "label": "pot",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2320,
        "contract": "contracts/game.sol:GameV3",
        "label": "QPFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2322,
        "contract": "contracts/game.sol:GameV3",
        "label": "CompFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2324,
        "contract": "contracts/game.sol:GameV3",
        "label": "DRFee",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2339,
        "contract": "contracts/game.sol:GameV3",
        "label": "primes",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_uint64)dyn_storage"
      },
      {
        "astId": 2362,
        "contract": "contracts/game.sol:GameV3",
        "label": "vrf",
        "offset": 0,
        "slot": "8",
        "type": "t_struct(VRF)2359_storage"
      },
      {
        "astId": 2375,
        "contract": "contracts/game.sol:GameV3",
        "label": "raceNames",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2378,
        "contract": "contracts/game.sol:GameV3",
        "label": "currentRace",
        "offset": 0,
        "slot": "17",
        "type": "t_enum(CurrentRace)2367"
      },
      {
        "astId": 2381,
        "contract": "contracts/game.sol:GameV3",
        "label": "currentVars",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(GameVars)6147_storage"
      },
      {
        "astId": 2383,
        "contract": "contracts/game.sol:GameV3",
        "label": "communityWallet",
        "offset": 0,
        "slot": "24",
        "type": "t_address_payable"
      },
      {
        "astId": 2385,
        "contract": "contracts/game.sol:GameV3",
        "label": "currentPosition",
        "offset": 20,
        "slot": "24",
        "type": "t_uint16"
      },
      {
        "astId": 2387,
        "contract": "contracts/game.sol:GameV3",
        "label": "distance",
        "offset": 22,
        "slot": "24",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)8_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[8]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint64)dyn_storage": {
        "base": "t_uint64",
        "encoding": "dynamic_array",
        "label": "uint64[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)2_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[2]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)3_storage": {
        "base": "t_uint8",
        "encoding": "inplace",
        "label": "uint8[3]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LinkTokenInterface)265": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_enum(CurrentRace)2367": {
        "encoding": "inplace",
        "label": "enum GameV3.CurrentRace",
        "numberOfBytes": "1"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(GameVars)6147_storage": {
        "encoding": "inplace",
        "label": "struct GameVars",
        "members": [
          {
            "astId": 6130,
            "contract": "contracts/game.sol:GameV3",
            "label": "raptors",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint16)8_storage"
          },
          {
            "astId": 6134,
            "contract": "contracts/game.sol:GameV3",
            "label": "expandedNums",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint16)8_storage"
          },
          {
            "astId": 6138,
            "contract": "contracts/game.sol:GameV3",
            "label": "fighters",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint8)2_storage"
          },
          {
            "astId": 6140,
            "contract": "contracts/game.sol:GameV3",
            "label": "fightWinner",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 6144,
            "contract": "contracts/game.sol:GameV3",
            "label": "places",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_uint8)3_storage"
          },
          {
            "astId": 6146,
            "contract": "contracts/game.sol:GameV3",
            "label": "dr",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(VRF)2359_storage": {
        "encoding": "inplace",
        "label": "struct GameV3.VRF",
        "members": [
          {
            "astId": 2341,
            "contract": "contracts/game.sol:GameV3",
            "label": "vrfCoordinator",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2343,
            "contract": "contracts/game.sol:GameV3",
            "label": "linkToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 2345,
            "contract": "contracts/game.sol:GameV3",
            "label": "keyHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 2347,
            "contract": "contracts/game.sol:GameV3",
            "label": "fee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2350,
            "contract": "contracts/game.sol:GameV3",
            "label": "LINK",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(LinkTokenInterface)265"
          },
          {
            "astId": 2352,
            "contract": "contracts/game.sol:GameV3",
            "label": "randomResult",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2356,
            "contract": "contracts/game.sol:GameV3",
            "label": "nonces",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 2358,
            "contract": "contracts/game.sol:GameV3",
            "label": "lastRequestId",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}